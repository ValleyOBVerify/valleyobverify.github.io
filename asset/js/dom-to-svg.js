/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("let x = __webpack_require__(/*! dom-to-svg */ \"./node_modules/dom-to-svg/lib/index.js\");\r\n\r\nwindow[\"dom-to-svg\"] = x;\n\n//# sourceURL=webpack://dom-to-svg/./index.js?");

/***/ }),

/***/ "./node_modules/gradient-parser/build/node.js":
/*!****************************************************!*\
  !*** ./node_modules/gradient-parser/build/node.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("// Copyright (c) 2014 Rafael Caricio. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nvar GradientParser = (GradientParser || {});\n\nGradientParser.stringify = (function() {\n\n  var visitor = {\n\n    'visit_linear-gradient': function(node) {\n      return visitor.visit_gradient(node);\n    },\n\n    'visit_repeating-linear-gradient': function(node) {\n      return visitor.visit_gradient(node);\n    },\n\n    'visit_radial-gradient': function(node) {\n      return visitor.visit_gradient(node);\n    },\n\n    'visit_repeating-radial-gradient': function(node) {\n      return visitor.visit_gradient(node);\n    },\n\n    'visit_gradient': function(node) {\n      var orientation = visitor.visit(node.orientation);\n      if (orientation) {\n        orientation += ', ';\n      }\n\n      return node.type + '(' + orientation + visitor.visit(node.colorStops) + ')';\n    },\n\n    'visit_shape': function(node) {\n      var result = node.value,\n          at = visitor.visit(node.at),\n          style = visitor.visit(node.style);\n\n      if (style) {\n        result += ' ' + style;\n      }\n\n      if (at) {\n        result += ' at ' + at;\n      }\n\n      return result;\n    },\n\n    'visit_default-radial': function(node) {\n      var result = '',\n          at = visitor.visit(node.at);\n\n      if (at) {\n        result += at;\n      }\n      return result;\n    },\n\n    'visit_extent-keyword': function(node) {\n      var result = node.value,\n          at = visitor.visit(node.at);\n\n      if (at) {\n        result += ' at ' + at;\n      }\n\n      return result;\n    },\n\n    'visit_position-keyword': function(node) {\n      return node.value;\n    },\n\n    'visit_position': function(node) {\n      return visitor.visit(node.value.x) + ' ' + visitor.visit(node.value.y);\n    },\n\n    'visit_%': function(node) {\n      return node.value + '%';\n    },\n\n    'visit_em': function(node) {\n      return node.value + 'em';\n    },\n\n    'visit_px': function(node) {\n      return node.value + 'px';\n    },\n\n    'visit_literal': function(node) {\n      return visitor.visit_color(node.value, node);\n    },\n\n    'visit_hex': function(node) {\n      return visitor.visit_color('#' + node.value, node);\n    },\n\n    'visit_rgb': function(node) {\n      return visitor.visit_color('rgb(' + node.value.join(', ') + ')', node);\n    },\n\n    'visit_rgba': function(node) {\n      return visitor.visit_color('rgba(' + node.value.join(', ') + ')', node);\n    },\n\n    'visit_color': function(resultColor, node) {\n      var result = resultColor,\n          length = visitor.visit(node.length);\n\n      if (length) {\n        result += ' ' + length;\n      }\n      return result;\n    },\n\n    'visit_angular': function(node) {\n      return node.value + 'deg';\n    },\n\n    'visit_directional': function(node) {\n      return 'to ' + node.value;\n    },\n\n    'visit_array': function(elements) {\n      var result = '',\n          size = elements.length;\n\n      elements.forEach(function(element, i) {\n        result += visitor.visit(element);\n        if (i < size - 1) {\n          result += ', ';\n        }\n      });\n\n      return result;\n    },\n\n    'visit': function(element) {\n      if (!element) {\n        return '';\n      }\n      var result = '';\n\n      if (element instanceof Array) {\n        return visitor.visit_array(element, result);\n      } else if (element.type) {\n        var nodeVisitor = visitor['visit_' + element.type];\n        if (nodeVisitor) {\n          return nodeVisitor(element);\n        } else {\n          throw Error('Missing visitor visit_' + element.type);\n        }\n      } else {\n        throw Error('Invalid node.');\n      }\n    }\n\n  };\n\n  return function(root) {\n    return visitor.visit(root);\n  };\n})();\n\n// Copyright (c) 2014 Rafael Caricio. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nvar GradientParser = (GradientParser || {});\n\nGradientParser.parse = (function() {\n\n  var tokens = {\n    linearGradient: /^(\\-(webkit|o|ms|moz)\\-)?(linear\\-gradient)/i,\n    repeatingLinearGradient: /^(\\-(webkit|o|ms|moz)\\-)?(repeating\\-linear\\-gradient)/i,\n    radialGradient: /^(\\-(webkit|o|ms|moz)\\-)?(radial\\-gradient)/i,\n    repeatingRadialGradient: /^(\\-(webkit|o|ms|moz)\\-)?(repeating\\-radial\\-gradient)/i,\n    sideOrCorner: /^to (left (top|bottom)|right (top|bottom)|left|right|top|bottom)/i,\n    extentKeywords: /^(closest\\-side|closest\\-corner|farthest\\-side|farthest\\-corner|contain|cover)/,\n    positionKeywords: /^(left|center|right|top|bottom)/i,\n    pixelValue: /^(-?(([0-9]*\\.[0-9]+)|([0-9]+\\.?)))px/,\n    percentageValue: /^(-?(([0-9]*\\.[0-9]+)|([0-9]+\\.?)))\\%/,\n    emValue: /^(-?(([0-9]*\\.[0-9]+)|([0-9]+\\.?)))em/,\n    angleValue: /^(-?(([0-9]*\\.[0-9]+)|([0-9]+\\.?)))deg/,\n    startCall: /^\\(/,\n    endCall: /^\\)/,\n    comma: /^,/,\n    hexColor: /^\\#([0-9a-fA-F]+)/,\n    literalColor: /^([a-zA-Z]+)/,\n    rgbColor: /^rgb/i,\n    rgbaColor: /^rgba/i,\n    number: /^(([0-9]*\\.[0-9]+)|([0-9]+\\.?))/\n  };\n\n  var input = '';\n\n  function error(msg) {\n    var err = new Error(input + ': ' + msg);\n    err.source = input;\n    throw err;\n  }\n\n  function getAST() {\n    var ast = matchListDefinitions();\n\n    if (input.length > 0) {\n      error('Invalid input not EOF');\n    }\n\n    return ast;\n  }\n\n  function matchListDefinitions() {\n    return matchListing(matchDefinition);\n  }\n\n  function matchDefinition() {\n    return matchGradient(\n            'linear-gradient',\n            tokens.linearGradient,\n            matchLinearOrientation) ||\n\n          matchGradient(\n            'repeating-linear-gradient',\n            tokens.repeatingLinearGradient,\n            matchLinearOrientation) ||\n\n          matchGradient(\n            'radial-gradient',\n            tokens.radialGradient,\n            matchListRadialOrientations) ||\n\n          matchGradient(\n            'repeating-radial-gradient',\n            tokens.repeatingRadialGradient,\n            matchListRadialOrientations);\n  }\n\n  function matchGradient(gradientType, pattern, orientationMatcher) {\n    return matchCall(pattern, function(captures) {\n\n      var orientation = orientationMatcher();\n      if (orientation) {\n        if (!scan(tokens.comma)) {\n          error('Missing comma before color stops');\n        }\n      }\n\n      return {\n        type: gradientType,\n        orientation: orientation,\n        colorStops: matchListing(matchColorStop)\n      };\n    });\n  }\n\n  function matchCall(pattern, callback) {\n    var captures = scan(pattern);\n\n    if (captures) {\n      if (!scan(tokens.startCall)) {\n        error('Missing (');\n      }\n\n      var result = callback(captures);\n\n      if (!scan(tokens.endCall)) {\n        error('Missing )');\n      }\n\n      return result;\n    }\n  }\n\n  function matchLinearOrientation() {\n    return matchSideOrCorner() ||\n      matchAngle();\n  }\n\n  function matchSideOrCorner() {\n    return match('directional', tokens.sideOrCorner, 1);\n  }\n\n  function matchAngle() {\n    return match('angular', tokens.angleValue, 1);\n  }\n\n  function matchListRadialOrientations() {\n    var radialOrientations,\n        radialOrientation = matchRadialOrientation(),\n        lookaheadCache;\n\n    if (radialOrientation) {\n      radialOrientations = [];\n      radialOrientations.push(radialOrientation);\n\n      lookaheadCache = input;\n      if (scan(tokens.comma)) {\n        radialOrientation = matchRadialOrientation();\n        if (radialOrientation) {\n          radialOrientations.push(radialOrientation);\n        } else {\n          input = lookaheadCache;\n        }\n      }\n    }\n\n    return radialOrientations;\n  }\n\n  function matchRadialOrientation() {\n    var radialType = matchCircle() ||\n      matchEllipse();\n\n    if (radialType) {\n      radialType.at = matchAtPosition();\n    } else {\n      var extent = matchExtentKeyword();\n      if (extent) {\n        radialType = extent;\n        var positionAt = matchAtPosition();\n        if (positionAt) {\n          radialType.at = positionAt;\n        }\n      } else {\n        var defaultPosition = matchPositioning();\n        if (defaultPosition) {\n          radialType = {\n            type: 'default-radial',\n            at: defaultPosition\n          };\n        }\n      }\n    }\n\n    return radialType;\n  }\n\n  function matchCircle() {\n    var circle = match('shape', /^(circle)/i, 0);\n\n    if (circle) {\n      circle.style = matchLength() || matchExtentKeyword();\n    }\n\n    return circle;\n  }\n\n  function matchEllipse() {\n    var ellipse = match('shape', /^(ellipse)/i, 0);\n\n    if (ellipse) {\n      ellipse.style =  matchDistance() || matchExtentKeyword();\n    }\n\n    return ellipse;\n  }\n\n  function matchExtentKeyword() {\n    return match('extent-keyword', tokens.extentKeywords, 1);\n  }\n\n  function matchAtPosition() {\n    if (match('position', /^at/, 0)) {\n      var positioning = matchPositioning();\n\n      if (!positioning) {\n        error('Missing positioning value');\n      }\n\n      return positioning;\n    }\n  }\n\n  function matchPositioning() {\n    var location = matchCoordinates();\n\n    if (location.x || location.y) {\n      return {\n        type: 'position',\n        value: location\n      };\n    }\n  }\n\n  function matchCoordinates() {\n    return {\n      x: matchDistance(),\n      y: matchDistance()\n    };\n  }\n\n  function matchListing(matcher) {\n    var captures = matcher(),\n      result = [];\n\n    if (captures) {\n      result.push(captures);\n      while (scan(tokens.comma)) {\n        captures = matcher();\n        if (captures) {\n          result.push(captures);\n        } else {\n          error('One extra comma');\n        }\n      }\n    }\n\n    return result;\n  }\n\n  function matchColorStop() {\n    var color = matchColor();\n\n    if (!color) {\n      error('Expected color definition');\n    }\n\n    color.length = matchDistance();\n    return color;\n  }\n\n  function matchColor() {\n    return matchHexColor() ||\n      matchRGBAColor() ||\n      matchRGBColor() ||\n      matchLiteralColor();\n  }\n\n  function matchLiteralColor() {\n    return match('literal', tokens.literalColor, 0);\n  }\n\n  function matchHexColor() {\n    return match('hex', tokens.hexColor, 1);\n  }\n\n  function matchRGBColor() {\n    return matchCall(tokens.rgbColor, function() {\n      return  {\n        type: 'rgb',\n        value: matchListing(matchNumber)\n      };\n    });\n  }\n\n  function matchRGBAColor() {\n    return matchCall(tokens.rgbaColor, function() {\n      return  {\n        type: 'rgba',\n        value: matchListing(matchNumber)\n      };\n    });\n  }\n\n  function matchNumber() {\n    return scan(tokens.number)[1];\n  }\n\n  function matchDistance() {\n    return match('%', tokens.percentageValue, 1) ||\n      matchPositionKeyword() ||\n      matchLength();\n  }\n\n  function matchPositionKeyword() {\n    return match('position-keyword', tokens.positionKeywords, 1);\n  }\n\n  function matchLength() {\n    return match('px', tokens.pixelValue, 1) ||\n      match('em', tokens.emValue, 1);\n  }\n\n  function match(type, pattern, captureIndex) {\n    var captures = scan(pattern);\n    if (captures) {\n      return {\n        type: type,\n        value: captures[captureIndex]\n      };\n    }\n  }\n\n  function scan(regexp) {\n    var captures,\n        blankCaptures;\n\n    blankCaptures = /^[\\n\\r\\t\\s]+/.exec(input);\n    if (blankCaptures) {\n        consume(blankCaptures[0].length);\n    }\n\n    captures = regexp.exec(input);\n    if (captures) {\n        consume(captures[0].length);\n    }\n\n    return captures;\n  }\n\n  function consume(size) {\n    input = input.substr(size);\n  }\n\n  return function(code) {\n    input = code.toString();\n    return getAST();\n  };\n})();\n\nexports.parse = GradientParser.parse;\nexports.stringify = GradientParser.stringify;\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/gradient-parser/build/node.js?");

/***/ }),

/***/ "./node_modules/picocolors/picocolors.browser.js":
/*!*******************************************************!*\
  !*** ./node_modules/picocolors/picocolors.browser.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("var x=String;\nvar create=function() {return {isColorSupported:false,reset:x,bold:x,dim:x,italic:x,underline:x,inverse:x,hidden:x,strikethrough:x,black:x,red:x,green:x,yellow:x,blue:x,magenta:x,cyan:x,white:x,gray:x,bgBlack:x,bgRed:x,bgGreen:x,bgYellow:x,bgBlue:x,bgMagenta:x,bgCyan:x,bgWhite:x}};\nmodule.exports=create();\nmodule.exports.createColors = create;\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/picocolors/picocolors.browser.js?");

/***/ }),

/***/ "./node_modules/postcss-value-parser/lib/index.js":
/*!********************************************************!*\
  !*** ./node_modules/postcss-value-parser/lib/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var parse = __webpack_require__(/*! ./parse */ \"./node_modules/postcss-value-parser/lib/parse.js\");\nvar walk = __webpack_require__(/*! ./walk */ \"./node_modules/postcss-value-parser/lib/walk.js\");\nvar stringify = __webpack_require__(/*! ./stringify */ \"./node_modules/postcss-value-parser/lib/stringify.js\");\n\nfunction ValueParser(value) {\n  if (this instanceof ValueParser) {\n    this.nodes = parse(value);\n    return this;\n  }\n  return new ValueParser(value);\n}\n\nValueParser.prototype.toString = function() {\n  return Array.isArray(this.nodes) ? stringify(this.nodes) : \"\";\n};\n\nValueParser.prototype.walk = function(cb, bubble) {\n  walk(this.nodes, cb, bubble);\n  return this;\n};\n\nValueParser.unit = __webpack_require__(/*! ./unit */ \"./node_modules/postcss-value-parser/lib/unit.js\");\n\nValueParser.walk = walk;\n\nValueParser.stringify = stringify;\n\nmodule.exports = ValueParser;\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/postcss-value-parser/lib/index.js?");

/***/ }),

/***/ "./node_modules/postcss-value-parser/lib/parse.js":
/*!********************************************************!*\
  !*** ./node_modules/postcss-value-parser/lib/parse.js ***!
  \********************************************************/
/***/ ((module) => {

eval("var openParentheses = \"(\".charCodeAt(0);\nvar closeParentheses = \")\".charCodeAt(0);\nvar singleQuote = \"'\".charCodeAt(0);\nvar doubleQuote = '\"'.charCodeAt(0);\nvar backslash = \"\\\\\".charCodeAt(0);\nvar slash = \"/\".charCodeAt(0);\nvar comma = \",\".charCodeAt(0);\nvar colon = \":\".charCodeAt(0);\nvar star = \"*\".charCodeAt(0);\nvar uLower = \"u\".charCodeAt(0);\nvar uUpper = \"U\".charCodeAt(0);\nvar plus = \"+\".charCodeAt(0);\nvar isUnicodeRange = /^[a-f0-9?-]+$/i;\n\nmodule.exports = function(input) {\n  var tokens = [];\n  var value = input;\n\n  var next,\n    quote,\n    prev,\n    token,\n    escape,\n    escapePos,\n    whitespacePos,\n    parenthesesOpenPos;\n  var pos = 0;\n  var code = value.charCodeAt(pos);\n  var max = value.length;\n  var stack = [{ nodes: tokens }];\n  var balanced = 0;\n  var parent;\n\n  var name = \"\";\n  var before = \"\";\n  var after = \"\";\n\n  while (pos < max) {\n    // Whitespaces\n    if (code <= 32) {\n      next = pos;\n      do {\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (code <= 32);\n      token = value.slice(pos, next);\n\n      prev = tokens[tokens.length - 1];\n      if (code === closeParentheses && balanced) {\n        after = token;\n      } else if (prev && prev.type === \"div\") {\n        prev.after = token;\n        prev.sourceEndIndex += token.length;\n      } else if (\n        code === comma ||\n        code === colon ||\n        (code === slash &&\n          value.charCodeAt(next + 1) !== star &&\n          (!parent ||\n            (parent && parent.type === \"function\" && parent.value !== \"calc\")))\n      ) {\n        before = token;\n      } else {\n        tokens.push({\n          type: \"space\",\n          sourceIndex: pos,\n          sourceEndIndex: next,\n          value: token\n        });\n      }\n\n      pos = next;\n\n      // Quotes\n    } else if (code === singleQuote || code === doubleQuote) {\n      next = pos;\n      quote = code === singleQuote ? \"'\" : '\"';\n      token = {\n        type: \"string\",\n        sourceIndex: pos,\n        quote: quote\n      };\n      do {\n        escape = false;\n        next = value.indexOf(quote, next + 1);\n        if (~next) {\n          escapePos = next;\n          while (value.charCodeAt(escapePos - 1) === backslash) {\n            escapePos -= 1;\n            escape = !escape;\n          }\n        } else {\n          value += quote;\n          next = value.length - 1;\n          token.unclosed = true;\n        }\n      } while (escape);\n      token.value = value.slice(pos + 1, next);\n      token.sourceEndIndex = token.unclosed ? next : next + 1;\n      tokens.push(token);\n      pos = next + 1;\n      code = value.charCodeAt(pos);\n\n      // Comments\n    } else if (code === slash && value.charCodeAt(pos + 1) === star) {\n      next = value.indexOf(\"*/\", pos);\n\n      token = {\n        type: \"comment\",\n        sourceIndex: pos,\n        sourceEndIndex: next + 2\n      };\n\n      if (next === -1) {\n        token.unclosed = true;\n        next = value.length;\n        token.sourceEndIndex = next;\n      }\n\n      token.value = value.slice(pos + 2, next);\n      tokens.push(token);\n\n      pos = next + 2;\n      code = value.charCodeAt(pos);\n\n      // Operation within calc\n    } else if (\n      (code === slash || code === star) &&\n      parent &&\n      parent.type === \"function\" &&\n      parent.value === \"calc\"\n    ) {\n      token = value[pos];\n      tokens.push({\n        type: \"word\",\n        sourceIndex: pos - before.length,\n        sourceEndIndex: pos + token.length,\n        value: token\n      });\n      pos += 1;\n      code = value.charCodeAt(pos);\n\n      // Dividers\n    } else if (code === slash || code === comma || code === colon) {\n      token = value[pos];\n\n      tokens.push({\n        type: \"div\",\n        sourceIndex: pos - before.length,\n        sourceEndIndex: pos + token.length,\n        value: token,\n        before: before,\n        after: \"\"\n      });\n      before = \"\";\n\n      pos += 1;\n      code = value.charCodeAt(pos);\n\n      // Open parentheses\n    } else if (openParentheses === code) {\n      // Whitespaces after open parentheses\n      next = pos;\n      do {\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (code <= 32);\n      parenthesesOpenPos = pos;\n      token = {\n        type: \"function\",\n        sourceIndex: pos - name.length,\n        value: name,\n        before: value.slice(parenthesesOpenPos + 1, next)\n      };\n      pos = next;\n\n      if (name === \"url\" && code !== singleQuote && code !== doubleQuote) {\n        next -= 1;\n        do {\n          escape = false;\n          next = value.indexOf(\")\", next + 1);\n          if (~next) {\n            escapePos = next;\n            while (value.charCodeAt(escapePos - 1) === backslash) {\n              escapePos -= 1;\n              escape = !escape;\n            }\n          } else {\n            value += \")\";\n            next = value.length - 1;\n            token.unclosed = true;\n          }\n        } while (escape);\n        // Whitespaces before closed\n        whitespacePos = next;\n        do {\n          whitespacePos -= 1;\n          code = value.charCodeAt(whitespacePos);\n        } while (code <= 32);\n        if (parenthesesOpenPos < whitespacePos) {\n          if (pos !== whitespacePos + 1) {\n            token.nodes = [\n              {\n                type: \"word\",\n                sourceIndex: pos,\n                sourceEndIndex: whitespacePos + 1,\n                value: value.slice(pos, whitespacePos + 1)\n              }\n            ];\n          } else {\n            token.nodes = [];\n          }\n          if (token.unclosed && whitespacePos + 1 !== next) {\n            token.after = \"\";\n            token.nodes.push({\n              type: \"space\",\n              sourceIndex: whitespacePos + 1,\n              sourceEndIndex: next,\n              value: value.slice(whitespacePos + 1, next)\n            });\n          } else {\n            token.after = value.slice(whitespacePos + 1, next);\n            token.sourceEndIndex = next;\n          }\n        } else {\n          token.after = \"\";\n          token.nodes = [];\n        }\n        pos = next + 1;\n        token.sourceEndIndex = token.unclosed ? next : pos;\n        code = value.charCodeAt(pos);\n        tokens.push(token);\n      } else {\n        balanced += 1;\n        token.after = \"\";\n        token.sourceEndIndex = pos + 1;\n        tokens.push(token);\n        stack.push(token);\n        tokens = token.nodes = [];\n        parent = token;\n      }\n      name = \"\";\n\n      // Close parentheses\n    } else if (closeParentheses === code && balanced) {\n      pos += 1;\n      code = value.charCodeAt(pos);\n\n      parent.after = after;\n      parent.sourceEndIndex += after.length;\n      after = \"\";\n      balanced -= 1;\n      stack[stack.length - 1].sourceEndIndex = pos;\n      stack.pop();\n      parent = stack[balanced];\n      tokens = parent.nodes;\n\n      // Words\n    } else {\n      next = pos;\n      do {\n        if (code === backslash) {\n          next += 1;\n        }\n        next += 1;\n        code = value.charCodeAt(next);\n      } while (\n        next < max &&\n        !(\n          code <= 32 ||\n          code === singleQuote ||\n          code === doubleQuote ||\n          code === comma ||\n          code === colon ||\n          code === slash ||\n          code === openParentheses ||\n          (code === star &&\n            parent &&\n            parent.type === \"function\" &&\n            parent.value === \"calc\") ||\n          (code === slash &&\n            parent.type === \"function\" &&\n            parent.value === \"calc\") ||\n          (code === closeParentheses && balanced)\n        )\n      );\n      token = value.slice(pos, next);\n\n      if (openParentheses === code) {\n        name = token;\n      } else if (\n        (uLower === token.charCodeAt(0) || uUpper === token.charCodeAt(0)) &&\n        plus === token.charCodeAt(1) &&\n        isUnicodeRange.test(token.slice(2))\n      ) {\n        tokens.push({\n          type: \"unicode-range\",\n          sourceIndex: pos,\n          sourceEndIndex: next,\n          value: token\n        });\n      } else {\n        tokens.push({\n          type: \"word\",\n          sourceIndex: pos,\n          sourceEndIndex: next,\n          value: token\n        });\n      }\n\n      pos = next;\n    }\n  }\n\n  for (pos = stack.length - 1; pos; pos -= 1) {\n    stack[pos].unclosed = true;\n    stack[pos].sourceEndIndex = value.length;\n  }\n\n  return stack[0].nodes;\n};\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/postcss-value-parser/lib/parse.js?");

/***/ }),

/***/ "./node_modules/postcss-value-parser/lib/stringify.js":
/*!************************************************************!*\
  !*** ./node_modules/postcss-value-parser/lib/stringify.js ***!
  \************************************************************/
/***/ ((module) => {

eval("function stringifyNode(node, custom) {\n  var type = node.type;\n  var value = node.value;\n  var buf;\n  var customResult;\n\n  if (custom && (customResult = custom(node)) !== undefined) {\n    return customResult;\n  } else if (type === \"word\" || type === \"space\") {\n    return value;\n  } else if (type === \"string\") {\n    buf = node.quote || \"\";\n    return buf + value + (node.unclosed ? \"\" : buf);\n  } else if (type === \"comment\") {\n    return \"/*\" + value + (node.unclosed ? \"\" : \"*/\");\n  } else if (type === \"div\") {\n    return (node.before || \"\") + value + (node.after || \"\");\n  } else if (Array.isArray(node.nodes)) {\n    buf = stringify(node.nodes, custom);\n    if (type !== \"function\") {\n      return buf;\n    }\n    return (\n      value +\n      \"(\" +\n      (node.before || \"\") +\n      buf +\n      (node.after || \"\") +\n      (node.unclosed ? \"\" : \")\")\n    );\n  }\n  return value;\n}\n\nfunction stringify(nodes, custom) {\n  var result, i;\n\n  if (Array.isArray(nodes)) {\n    result = \"\";\n    for (i = nodes.length - 1; ~i; i -= 1) {\n      result = stringifyNode(nodes[i], custom) + result;\n    }\n    return result;\n  }\n  return stringifyNode(nodes, custom);\n}\n\nmodule.exports = stringify;\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/postcss-value-parser/lib/stringify.js?");

/***/ }),

/***/ "./node_modules/postcss-value-parser/lib/unit.js":
/*!*******************************************************!*\
  !*** ./node_modules/postcss-value-parser/lib/unit.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("var minus = \"-\".charCodeAt(0);\nvar plus = \"+\".charCodeAt(0);\nvar dot = \".\".charCodeAt(0);\nvar exp = \"e\".charCodeAt(0);\nvar EXP = \"E\".charCodeAt(0);\n\n// Check if three code points would start a number\n// https://www.w3.org/TR/css-syntax-3/#starts-with-a-number\nfunction likeNumber(value) {\n  var code = value.charCodeAt(0);\n  var nextCode;\n\n  if (code === plus || code === minus) {\n    nextCode = value.charCodeAt(1);\n\n    if (nextCode >= 48 && nextCode <= 57) {\n      return true;\n    }\n\n    var nextNextCode = value.charCodeAt(2);\n\n    if (nextCode === dot && nextNextCode >= 48 && nextNextCode <= 57) {\n      return true;\n    }\n\n    return false;\n  }\n\n  if (code === dot) {\n    nextCode = value.charCodeAt(1);\n\n    if (nextCode >= 48 && nextCode <= 57) {\n      return true;\n    }\n\n    return false;\n  }\n\n  if (code >= 48 && code <= 57) {\n    return true;\n  }\n\n  return false;\n}\n\n// Consume a number\n// https://www.w3.org/TR/css-syntax-3/#consume-number\nmodule.exports = function(value) {\n  var pos = 0;\n  var length = value.length;\n  var code;\n  var nextCode;\n  var nextNextCode;\n\n  if (length === 0 || !likeNumber(value)) {\n    return false;\n  }\n\n  code = value.charCodeAt(pos);\n\n  if (code === plus || code === minus) {\n    pos++;\n  }\n\n  while (pos < length) {\n    code = value.charCodeAt(pos);\n\n    if (code < 48 || code > 57) {\n      break;\n    }\n\n    pos += 1;\n  }\n\n  code = value.charCodeAt(pos);\n  nextCode = value.charCodeAt(pos + 1);\n\n  if (code === dot && nextCode >= 48 && nextCode <= 57) {\n    pos += 2;\n\n    while (pos < length) {\n      code = value.charCodeAt(pos);\n\n      if (code < 48 || code > 57) {\n        break;\n      }\n\n      pos += 1;\n    }\n  }\n\n  code = value.charCodeAt(pos);\n  nextCode = value.charCodeAt(pos + 1);\n  nextNextCode = value.charCodeAt(pos + 2);\n\n  if (\n    (code === exp || code === EXP) &&\n    ((nextCode >= 48 && nextCode <= 57) ||\n      ((nextCode === plus || nextCode === minus) &&\n        nextNextCode >= 48 &&\n        nextNextCode <= 57))\n  ) {\n    pos += nextCode === plus || nextCode === minus ? 3 : 2;\n\n    while (pos < length) {\n      code = value.charCodeAt(pos);\n\n      if (code < 48 || code > 57) {\n        break;\n      }\n\n      pos += 1;\n    }\n  }\n\n  return {\n    number: value.slice(0, pos),\n    unit: value.slice(pos)\n  };\n};\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/postcss-value-parser/lib/unit.js?");

/***/ }),

/***/ "./node_modules/postcss-value-parser/lib/walk.js":
/*!*******************************************************!*\
  !*** ./node_modules/postcss-value-parser/lib/walk.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("module.exports = function walk(nodes, cb, bubble) {\n  var i, max, node, result;\n\n  for (i = 0, max = nodes.length; i < max; i += 1) {\n    node = nodes[i];\n    if (!bubble) {\n      result = cb(node, i, nodes);\n    }\n\n    if (\n      result !== false &&\n      node.type === \"function\" &&\n      Array.isArray(node.nodes)\n    ) {\n      walk(node.nodes, cb, bubble);\n    }\n\n    if (bubble) {\n      cb(node, i, nodes);\n    }\n  }\n};\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/postcss-value-parser/lib/walk.js?");

/***/ }),

/***/ "./node_modules/postcss/lib/at-rule.js":
/*!*********************************************!*\
  !*** ./node_modules/postcss/lib/at-rule.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nlet Container = __webpack_require__(/*! ./container */ \"./node_modules/postcss/lib/container.js\")\n\nclass AtRule extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'atrule'\n  }\n\n  append(...children) {\n    if (!this.proxyOf.nodes) this.nodes = []\n    return super.append(...children)\n  }\n\n  prepend(...children) {\n    if (!this.proxyOf.nodes) this.nodes = []\n    return super.prepend(...children)\n  }\n}\n\nmodule.exports = AtRule\nAtRule.default = AtRule\n\nContainer.registerAtRule(AtRule)\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/postcss/lib/at-rule.js?");

/***/ }),

/***/ "./node_modules/postcss/lib/comment.js":
/*!*********************************************!*\
  !*** ./node_modules/postcss/lib/comment.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nlet Node = __webpack_require__(/*! ./node */ \"./node_modules/postcss/lib/node.js\")\n\nclass Comment extends Node {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'comment'\n  }\n}\n\nmodule.exports = Comment\nComment.default = Comment\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/postcss/lib/comment.js?");

/***/ }),

/***/ "./node_modules/postcss/lib/container.js":
/*!***********************************************!*\
  !*** ./node_modules/postcss/lib/container.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nlet { isClean, my } = __webpack_require__(/*! ./symbols */ \"./node_modules/postcss/lib/symbols.js\")\nlet Declaration = __webpack_require__(/*! ./declaration */ \"./node_modules/postcss/lib/declaration.js\")\nlet Comment = __webpack_require__(/*! ./comment */ \"./node_modules/postcss/lib/comment.js\")\nlet Node = __webpack_require__(/*! ./node */ \"./node_modules/postcss/lib/node.js\")\n\nlet parse, Rule, AtRule, Root\n\nfunction cleanSource(nodes) {\n  return nodes.map(i => {\n    if (i.nodes) i.nodes = cleanSource(i.nodes)\n    delete i.source\n    return i\n  })\n}\n\nfunction markDirtyUp(node) {\n  node[isClean] = false\n  if (node.proxyOf.nodes) {\n    for (let i of node.proxyOf.nodes) {\n      markDirtyUp(i)\n    }\n  }\n}\n\nclass Container extends Node {\n  push(child) {\n    child.parent = this\n    this.proxyOf.nodes.push(child)\n    return this\n  }\n\n  each(callback) {\n    if (!this.proxyOf.nodes) return undefined\n    let iterator = this.getIterator()\n\n    let index, result\n    while (this.indexes[iterator] < this.proxyOf.nodes.length) {\n      index = this.indexes[iterator]\n      result = callback(this.proxyOf.nodes[index], index)\n      if (result === false) break\n\n      this.indexes[iterator] += 1\n    }\n\n    delete this.indexes[iterator]\n    return result\n  }\n\n  walk(callback) {\n    return this.each((child, i) => {\n      let result\n      try {\n        result = callback(child, i)\n      } catch (e) {\n        throw child.addToError(e)\n      }\n      if (result !== false && child.walk) {\n        result = child.walk(callback)\n      }\n\n      return result\n    })\n  }\n\n  walkDecls(prop, callback) {\n    if (!callback) {\n      callback = prop\n      return this.walk((child, i) => {\n        if (child.type === 'decl') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (prop instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'decl' && prop.test(child.prop)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'decl' && child.prop === prop) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkRules(selector, callback) {\n    if (!callback) {\n      callback = selector\n\n      return this.walk((child, i) => {\n        if (child.type === 'rule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (selector instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'rule' && selector.test(child.selector)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'rule' && child.selector === selector) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkAtRules(name, callback) {\n    if (!callback) {\n      callback = name\n      return this.walk((child, i) => {\n        if (child.type === 'atrule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (name instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'atrule' && name.test(child.name)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'atrule' && child.name === name) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkComments(callback) {\n    return this.walk((child, i) => {\n      if (child.type === 'comment') {\n        return callback(child, i)\n      }\n    })\n  }\n\n  append(...children) {\n    for (let child of children) {\n      let nodes = this.normalize(child, this.last)\n      for (let node of nodes) this.proxyOf.nodes.push(node)\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  prepend(...children) {\n    children = children.reverse()\n    for (let child of children) {\n      let nodes = this.normalize(child, this.first, 'prepend').reverse()\n      for (let node of nodes) this.proxyOf.nodes.unshift(node)\n      for (let id in this.indexes) {\n        this.indexes[id] = this.indexes[id] + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  cleanRaws(keepBetween) {\n    super.cleanRaws(keepBetween)\n    if (this.nodes) {\n      for (let node of this.nodes) node.cleanRaws(keepBetween)\n    }\n  }\n\n  insertBefore(exist, add) {\n    let existIndex = this.index(exist)\n    let type = exist === 0 ? 'prepend' : false\n    let nodes = this.normalize(add, this.proxyOf.nodes[existIndex], type).reverse()\n    existIndex = this.index(exist)\n    for (let node of nodes) this.proxyOf.nodes.splice(existIndex, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (existIndex <= index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  insertAfter(exist, add) {\n    let existIndex = this.index(exist)\n    let nodes = this.normalize(add, this.proxyOf.nodes[existIndex]).reverse()\n    existIndex = this.index(exist)\n    for (let node of nodes) this.proxyOf.nodes.splice(existIndex + 1, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (existIndex < index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  removeChild(child) {\n    child = this.index(child)\n    this.proxyOf.nodes[child].parent = undefined\n    this.proxyOf.nodes.splice(child, 1)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (index >= child) {\n        this.indexes[id] = index - 1\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  removeAll() {\n    for (let node of this.proxyOf.nodes) node.parent = undefined\n    this.proxyOf.nodes = []\n\n    this.markDirty()\n\n    return this\n  }\n\n  replaceValues(pattern, opts, callback) {\n    if (!callback) {\n      callback = opts\n      opts = {}\n    }\n\n    this.walkDecls(decl => {\n      if (opts.props && !opts.props.includes(decl.prop)) return\n      if (opts.fast && !decl.value.includes(opts.fast)) return\n\n      decl.value = decl.value.replace(pattern, callback)\n    })\n\n    this.markDirty()\n\n    return this\n  }\n\n  every(condition) {\n    return this.nodes.every(condition)\n  }\n\n  some(condition) {\n    return this.nodes.some(condition)\n  }\n\n  index(child) {\n    if (typeof child === 'number') return child\n    if (child.proxyOf) child = child.proxyOf\n    return this.proxyOf.nodes.indexOf(child)\n  }\n\n  get first() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[0]\n  }\n\n  get last() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[this.proxyOf.nodes.length - 1]\n  }\n\n  normalize(nodes, sample) {\n    if (typeof nodes === 'string') {\n      nodes = cleanSource(parse(nodes).nodes)\n    } else if (Array.isArray(nodes)) {\n      nodes = nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type === 'root' && this.type !== 'document') {\n      nodes = nodes.nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type) {\n      nodes = [nodes]\n    } else if (nodes.prop) {\n      if (typeof nodes.value === 'undefined') {\n        throw new Error('Value field is missed in node creation')\n      } else if (typeof nodes.value !== 'string') {\n        nodes.value = String(nodes.value)\n      }\n      nodes = [new Declaration(nodes)]\n    } else if (nodes.selector) {\n      nodes = [new Rule(nodes)]\n    } else if (nodes.name) {\n      nodes = [new AtRule(nodes)]\n    } else if (nodes.text) {\n      nodes = [new Comment(nodes)]\n    } else {\n      throw new Error('Unknown node type in node creation')\n    }\n\n    let processed = nodes.map(i => {\n      /* c8 ignore next */\n      if (!i[my]) Container.rebuild(i)\n      i = i.proxyOf\n      if (i.parent) i.parent.removeChild(i)\n      if (i[isClean]) markDirtyUp(i)\n      if (typeof i.raws.before === 'undefined') {\n        if (sample && typeof sample.raws.before !== 'undefined') {\n          i.raws.before = sample.raws.before.replace(/\\S/g, '')\n        }\n      }\n      i.parent = this.proxyOf\n      return i\n    })\n\n    return processed\n  }\n\n  getProxyProcessor() {\n    return {\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (prop === 'name' || prop === 'params' || prop === 'selector') {\n          node.markDirty()\n        }\n        return true\n      },\n\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (!node[prop]) {\n          return node[prop]\n        } else if (\n          prop === 'each' ||\n          (typeof prop === 'string' && prop.startsWith('walk'))\n        ) {\n          return (...args) => {\n            return node[prop](\n              ...args.map(i => {\n                if (typeof i === 'function') {\n                  return (child, index) => i(child.toProxy(), index)\n                } else {\n                  return i\n                }\n              })\n            )\n          }\n        } else if (prop === 'every' || prop === 'some') {\n          return cb => {\n            return node[prop]((child, ...other) =>\n              cb(child.toProxy(), ...other)\n            )\n          }\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else if (prop === 'nodes') {\n          return node.nodes.map(i => i.toProxy())\n        } else if (prop === 'first' || prop === 'last') {\n          return node[prop].toProxy()\n        } else {\n          return node[prop]\n        }\n      }\n    }\n  }\n\n  getIterator() {\n    if (!this.lastEach) this.lastEach = 0\n    if (!this.indexes) this.indexes = {}\n\n    this.lastEach += 1\n    let iterator = this.lastEach\n    this.indexes[iterator] = 0\n\n    return iterator\n  }\n}\n\nContainer.registerParse = dependant => {\n  parse = dependant\n}\n\nContainer.registerRule = dependant => {\n  Rule = dependant\n}\n\nContainer.registerAtRule = dependant => {\n  AtRule = dependant\n}\n\nContainer.registerRoot = dependant => {\n  Root = dependant\n}\n\nmodule.exports = Container\nContainer.default = Container\n\n/* c8 ignore start */\nContainer.rebuild = node => {\n  if (node.type === 'atrule') {\n    Object.setPrototypeOf(node, AtRule.prototype)\n  } else if (node.type === 'rule') {\n    Object.setPrototypeOf(node, Rule.prototype)\n  } else if (node.type === 'decl') {\n    Object.setPrototypeOf(node, Declaration.prototype)\n  } else if (node.type === 'comment') {\n    Object.setPrototypeOf(node, Comment.prototype)\n  } else if (node.type === 'root') {\n    Object.setPrototypeOf(node, Root.prototype)\n  }\n\n  node[my] = true\n\n  if (node.nodes) {\n    node.nodes.forEach(child => {\n      Container.rebuild(child)\n    })\n  }\n}\n/* c8 ignore stop */\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/postcss/lib/container.js?");

/***/ }),

/***/ "./node_modules/postcss/lib/css-syntax-error.js":
/*!******************************************************!*\
  !*** ./node_modules/postcss/lib/css-syntax-error.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nlet pico = __webpack_require__(/*! picocolors */ \"./node_modules/picocolors/picocolors.browser.js\")\n\nlet terminalHighlight = __webpack_require__(/*! ./terminal-highlight */ \"?5580\")\n\nclass CssSyntaxError extends Error {\n  constructor(message, line, column, source, file, plugin) {\n    super(message)\n    this.name = 'CssSyntaxError'\n    this.reason = message\n\n    if (file) {\n      this.file = file\n    }\n    if (source) {\n      this.source = source\n    }\n    if (plugin) {\n      this.plugin = plugin\n    }\n    if (typeof line !== 'undefined' && typeof column !== 'undefined') {\n      if (typeof line === 'number') {\n        this.line = line\n        this.column = column\n      } else {\n        this.line = line.line\n        this.column = line.column\n        this.endLine = column.line\n        this.endColumn = column.column\n      }\n    }\n\n    this.setMessage()\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, CssSyntaxError)\n    }\n  }\n\n  setMessage() {\n    this.message = this.plugin ? this.plugin + ': ' : ''\n    this.message += this.file ? this.file : '<css input>'\n    if (typeof this.line !== 'undefined') {\n      this.message += ':' + this.line + ':' + this.column\n    }\n    this.message += ': ' + this.reason\n  }\n\n  showSourceCode(color) {\n    if (!this.source) return ''\n\n    let css = this.source\n    if (color == null) color = pico.isColorSupported\n    if (terminalHighlight) {\n      if (color) css = terminalHighlight(css)\n    }\n\n    let lines = css.split(/\\r?\\n/)\n    let start = Math.max(this.line - 3, 0)\n    let end = Math.min(this.line + 2, lines.length)\n\n    let maxWidth = String(end).length\n\n    let mark, aside\n    if (color) {\n      let { bold, red, gray } = pico.createColors(true)\n      mark = text => bold(red(text))\n      aside = text => gray(text)\n    } else {\n      mark = aside = str => str\n    }\n\n    return lines\n      .slice(start, end)\n      .map((line, index) => {\n        let number = start + 1 + index\n        let gutter = ' ' + (' ' + number).slice(-maxWidth) + ' | '\n        if (number === this.line) {\n          let spacing =\n            aside(gutter.replace(/\\d/g, ' ')) +\n            line.slice(0, this.column - 1).replace(/[^\\t]/g, ' ')\n          return mark('>') + aside(gutter) + line + '\\n ' + spacing + mark('^')\n        }\n        return ' ' + aside(gutter) + line\n      })\n      .join('\\n')\n  }\n\n  toString() {\n    let code = this.showSourceCode()\n    if (code) {\n      code = '\\n\\n' + code + '\\n'\n    }\n    return this.name + ': ' + this.message + code\n  }\n}\n\nmodule.exports = CssSyntaxError\nCssSyntaxError.default = CssSyntaxError\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/postcss/lib/css-syntax-error.js?");

/***/ }),

/***/ "./node_modules/postcss/lib/declaration.js":
/*!*************************************************!*\
  !*** ./node_modules/postcss/lib/declaration.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nlet Node = __webpack_require__(/*! ./node */ \"./node_modules/postcss/lib/node.js\")\n\nclass Declaration extends Node {\n  constructor(defaults) {\n    if (\n      defaults &&\n      typeof defaults.value !== 'undefined' &&\n      typeof defaults.value !== 'string'\n    ) {\n      defaults = { ...defaults, value: String(defaults.value) }\n    }\n    super(defaults)\n    this.type = 'decl'\n  }\n\n  get variable() {\n    return this.prop.startsWith('--') || this.prop[0] === '$'\n  }\n}\n\nmodule.exports = Declaration\nDeclaration.default = Declaration\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/postcss/lib/declaration.js?");

/***/ }),

/***/ "./node_modules/postcss/lib/document.js":
/*!**********************************************!*\
  !*** ./node_modules/postcss/lib/document.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nlet Container = __webpack_require__(/*! ./container */ \"./node_modules/postcss/lib/container.js\")\n\nlet LazyResult, Processor\n\nclass Document extends Container {\n  constructor(defaults) {\n    // type needs to be passed to super, otherwise child roots won't be normalized correctly\n    super({ type: 'document', ...defaults })\n\n    if (!this.nodes) {\n      this.nodes = []\n    }\n  }\n\n  toResult(opts = {}) {\n    let lazy = new LazyResult(new Processor(), this, opts)\n\n    return lazy.stringify()\n  }\n}\n\nDocument.registerLazyResult = dependant => {\n  LazyResult = dependant\n}\n\nDocument.registerProcessor = dependant => {\n  Processor = dependant\n}\n\nmodule.exports = Document\nDocument.default = Document\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/postcss/lib/document.js?");

/***/ }),

/***/ "./node_modules/postcss/lib/fromJSON.js":
/*!**********************************************!*\
  !*** ./node_modules/postcss/lib/fromJSON.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nlet Declaration = __webpack_require__(/*! ./declaration */ \"./node_modules/postcss/lib/declaration.js\")\nlet PreviousMap = __webpack_require__(/*! ./previous-map */ \"./node_modules/postcss/lib/previous-map.js\")\nlet Comment = __webpack_require__(/*! ./comment */ \"./node_modules/postcss/lib/comment.js\")\nlet AtRule = __webpack_require__(/*! ./at-rule */ \"./node_modules/postcss/lib/at-rule.js\")\nlet Input = __webpack_require__(/*! ./input */ \"./node_modules/postcss/lib/input.js\")\nlet Root = __webpack_require__(/*! ./root */ \"./node_modules/postcss/lib/root.js\")\nlet Rule = __webpack_require__(/*! ./rule */ \"./node_modules/postcss/lib/rule.js\")\n\nfunction fromJSON(json, inputs) {\n  if (Array.isArray(json)) return json.map(n => fromJSON(n))\n\n  let { inputs: ownInputs, ...defaults } = json\n  if (ownInputs) {\n    inputs = []\n    for (let input of ownInputs) {\n      let inputHydrated = { ...input, __proto__: Input.prototype }\n      if (inputHydrated.map) {\n        inputHydrated.map = {\n          ...inputHydrated.map,\n          __proto__: PreviousMap.prototype\n        }\n      }\n      inputs.push(inputHydrated)\n    }\n  }\n  if (defaults.nodes) {\n    defaults.nodes = json.nodes.map(n => fromJSON(n, inputs))\n  }\n  if (defaults.source) {\n    let { inputId, ...source } = defaults.source\n    defaults.source = source\n    if (inputId != null) {\n      defaults.source.input = inputs[inputId]\n    }\n  }\n  if (defaults.type === 'root') {\n    return new Root(defaults)\n  } else if (defaults.type === 'decl') {\n    return new Declaration(defaults)\n  } else if (defaults.type === 'rule') {\n    return new Rule(defaults)\n  } else if (defaults.type === 'comment') {\n    return new Comment(defaults)\n  } else if (defaults.type === 'atrule') {\n    return new AtRule(defaults)\n  } else {\n    throw new Error('Unknown node type: ' + json.type)\n  }\n}\n\nmodule.exports = fromJSON\nfromJSON.default = fromJSON\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/postcss/lib/fromJSON.js?");

/***/ }),

/***/ "./node_modules/postcss/lib/input.js":
/*!*******************************************!*\
  !*** ./node_modules/postcss/lib/input.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nlet { SourceMapConsumer, SourceMapGenerator } = __webpack_require__(/*! source-map-js */ \"?b8cb\")\nlet { fileURLToPath, pathToFileURL } = __webpack_require__(/*! url */ \"?c717\")\nlet { resolve, isAbsolute } = __webpack_require__(/*! path */ \"?6197\")\nlet { nanoid } = __webpack_require__(/*! nanoid/non-secure */ \"./node_modules/nanoid/non-secure/index.cjs\")\n\nlet terminalHighlight = __webpack_require__(/*! ./terminal-highlight */ \"?5580\")\nlet CssSyntaxError = __webpack_require__(/*! ./css-syntax-error */ \"./node_modules/postcss/lib/css-syntax-error.js\")\nlet PreviousMap = __webpack_require__(/*! ./previous-map */ \"./node_modules/postcss/lib/previous-map.js\")\n\nlet fromOffsetCache = Symbol('fromOffsetCache')\n\nlet sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator)\nlet pathAvailable = Boolean(resolve && isAbsolute)\n\nclass Input {\n  constructor(css, opts = {}) {\n    if (\n      css === null ||\n      typeof css === 'undefined' ||\n      (typeof css === 'object' && !css.toString)\n    ) {\n      throw new Error(`PostCSS received ${css} instead of CSS string`)\n    }\n\n    this.css = css.toString()\n\n    if (this.css[0] === '\\uFEFF' || this.css[0] === '\\uFFFE') {\n      this.hasBOM = true\n      this.css = this.css.slice(1)\n    } else {\n      this.hasBOM = false\n    }\n\n    if (opts.from) {\n      if (\n        !pathAvailable ||\n        /^\\w+:\\/\\//.test(opts.from) ||\n        isAbsolute(opts.from)\n      ) {\n        this.file = opts.from\n      } else {\n        this.file = resolve(opts.from)\n      }\n    }\n\n    if (pathAvailable && sourceMapAvailable) {\n      let map = new PreviousMap(this.css, opts)\n      if (map.text) {\n        this.map = map\n        let file = map.consumer().file\n        if (!this.file && file) this.file = this.mapResolve(file)\n      }\n    }\n\n    if (!this.file) {\n      this.id = '<input css ' + nanoid(6) + '>'\n    }\n    if (this.map) this.map.file = this.from\n  }\n\n  fromOffset(offset) {\n    let lastLine, lineToIndex\n    if (!this[fromOffsetCache]) {\n      let lines = this.css.split('\\n')\n      lineToIndex = new Array(lines.length)\n      let prevIndex = 0\n\n      for (let i = 0, l = lines.length; i < l; i++) {\n        lineToIndex[i] = prevIndex\n        prevIndex += lines[i].length + 1\n      }\n\n      this[fromOffsetCache] = lineToIndex\n    } else {\n      lineToIndex = this[fromOffsetCache]\n    }\n    lastLine = lineToIndex[lineToIndex.length - 1]\n\n    let min = 0\n    if (offset >= lastLine) {\n      min = lineToIndex.length - 1\n    } else {\n      let max = lineToIndex.length - 2\n      let mid\n      while (min < max) {\n        mid = min + ((max - min) >> 1)\n        if (offset < lineToIndex[mid]) {\n          max = mid - 1\n        } else if (offset >= lineToIndex[mid + 1]) {\n          min = mid + 1\n        } else {\n          min = mid\n          break\n        }\n      }\n    }\n    return {\n      line: min + 1,\n      col: offset - lineToIndex[min] + 1\n    }\n  }\n\n  error(message, line, column, opts = {}) {\n    let result, endLine, endColumn\n\n    if (line && typeof line === 'object') {\n      let start = line\n      let end = column\n      if (typeof line.offset === 'number') {\n        let pos = this.fromOffset(start.offset)\n        line = pos.line\n        column = pos.col\n      } else {\n        line = start.line\n        column = start.column\n      }\n      if (typeof end.offset === 'number') {\n        let pos = this.fromOffset(end.offset)\n        endLine = pos.line\n        endColumn = pos.col\n      } else {\n        endLine = end.line\n        endColumn = end.column\n      }\n    } else if (!column) {\n      let pos = this.fromOffset(line)\n      line = pos.line\n      column = pos.col\n    }\n\n    let origin = this.origin(line, column, endLine, endColumn)\n    if (origin) {\n      result = new CssSyntaxError(\n        message,\n        origin.endLine === undefined\n          ? origin.line\n          : { line: origin.line, column: origin.column },\n        origin.endLine === undefined\n          ? origin.column\n          : { line: origin.endLine, column: origin.endColumn },\n        origin.source,\n        origin.file,\n        opts.plugin\n      )\n    } else {\n      result = new CssSyntaxError(\n        message,\n        endLine === undefined ? line : { line, column },\n        endLine === undefined ? column : { line: endLine, column: endColumn },\n        this.css,\n        this.file,\n        opts.plugin\n      )\n    }\n\n    result.input = { line, column, endLine, endColumn, source: this.css }\n    if (this.file) {\n      if (pathToFileURL) {\n        result.input.url = pathToFileURL(this.file).toString()\n      }\n      result.input.file = this.file\n    }\n\n    return result\n  }\n\n  origin(line, column, endLine, endColumn) {\n    if (!this.map) return false\n    let consumer = this.map.consumer()\n\n    let from = consumer.originalPositionFor({ line, column })\n    if (!from.source) return false\n\n    let to\n    if (typeof endLine === 'number') {\n      to = consumer.originalPositionFor({ line: endLine, column: endColumn })\n    }\n\n    let fromUrl\n\n    if (isAbsolute(from.source)) {\n      fromUrl = pathToFileURL(from.source)\n    } else {\n      fromUrl = new URL(\n        from.source,\n        this.map.consumer().sourceRoot || pathToFileURL(this.map.mapFile)\n      )\n    }\n\n    let result = {\n      url: fromUrl.toString(),\n      line: from.line,\n      column: from.column,\n      endLine: to && to.line,\n      endColumn: to && to.column\n    }\n\n    if (fromUrl.protocol === 'file:') {\n      if (fileURLToPath) {\n        result.file = fileURLToPath(fromUrl)\n      } else {\n        /* c8 ignore next 2 */\n        throw new Error(`file: protocol is not available in this PostCSS build`)\n      }\n    }\n\n    let source = consumer.sourceContentFor(from.source)\n    if (source) result.source = source\n\n    return result\n  }\n\n  mapResolve(file) {\n    if (/^\\w+:\\/\\//.test(file)) {\n      return file\n    }\n    return resolve(this.map.consumer().sourceRoot || this.map.root || '.', file)\n  }\n\n  get from() {\n    return this.file || this.id\n  }\n\n  toJSON() {\n    let json = {}\n    for (let name of ['hasBOM', 'css', 'file', 'id']) {\n      if (this[name] != null) {\n        json[name] = this[name]\n      }\n    }\n    if (this.map) {\n      json.map = { ...this.map }\n      if (json.map.consumerCache) {\n        json.map.consumerCache = undefined\n      }\n    }\n    return json\n  }\n}\n\nmodule.exports = Input\nInput.default = Input\n\nif (terminalHighlight && terminalHighlight.registerInput) {\n  terminalHighlight.registerInput(Input)\n}\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/postcss/lib/input.js?");

/***/ }),

/***/ "./node_modules/postcss/lib/lazy-result.js":
/*!*************************************************!*\
  !*** ./node_modules/postcss/lib/lazy-result.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nlet { isClean, my } = __webpack_require__(/*! ./symbols */ \"./node_modules/postcss/lib/symbols.js\")\nlet MapGenerator = __webpack_require__(/*! ./map-generator */ \"./node_modules/postcss/lib/map-generator.js\")\nlet stringify = __webpack_require__(/*! ./stringify */ \"./node_modules/postcss/lib/stringify.js\")\nlet Container = __webpack_require__(/*! ./container */ \"./node_modules/postcss/lib/container.js\")\nlet Document = __webpack_require__(/*! ./document */ \"./node_modules/postcss/lib/document.js\")\nlet warnOnce = __webpack_require__(/*! ./warn-once */ \"./node_modules/postcss/lib/warn-once.js\")\nlet Result = __webpack_require__(/*! ./result */ \"./node_modules/postcss/lib/result.js\")\nlet parse = __webpack_require__(/*! ./parse */ \"./node_modules/postcss/lib/parse.js\")\nlet Root = __webpack_require__(/*! ./root */ \"./node_modules/postcss/lib/root.js\")\n\nconst TYPE_TO_CLASS_NAME = {\n  document: 'Document',\n  root: 'Root',\n  atrule: 'AtRule',\n  rule: 'Rule',\n  decl: 'Declaration',\n  comment: 'Comment'\n}\n\nconst PLUGIN_PROPS = {\n  postcssPlugin: true,\n  prepare: true,\n  Once: true,\n  Document: true,\n  Root: true,\n  Declaration: true,\n  Rule: true,\n  AtRule: true,\n  Comment: true,\n  DeclarationExit: true,\n  RuleExit: true,\n  AtRuleExit: true,\n  CommentExit: true,\n  RootExit: true,\n  DocumentExit: true,\n  OnceExit: true\n}\n\nconst NOT_VISITORS = {\n  postcssPlugin: true,\n  prepare: true,\n  Once: true\n}\n\nconst CHILDREN = 0\n\nfunction isPromise(obj) {\n  return typeof obj === 'object' && typeof obj.then === 'function'\n}\n\nfunction getEvents(node) {\n  let key = false\n  let type = TYPE_TO_CLASS_NAME[node.type]\n  if (node.type === 'decl') {\n    key = node.prop.toLowerCase()\n  } else if (node.type === 'atrule') {\n    key = node.name.toLowerCase()\n  }\n\n  if (key && node.append) {\n    return [\n      type,\n      type + '-' + key,\n      CHILDREN,\n      type + 'Exit',\n      type + 'Exit-' + key\n    ]\n  } else if (key) {\n    return [type, type + '-' + key, type + 'Exit', type + 'Exit-' + key]\n  } else if (node.append) {\n    return [type, CHILDREN, type + 'Exit']\n  } else {\n    return [type, type + 'Exit']\n  }\n}\n\nfunction toStack(node) {\n  let events\n  if (node.type === 'document') {\n    events = ['Document', CHILDREN, 'DocumentExit']\n  } else if (node.type === 'root') {\n    events = ['Root', CHILDREN, 'RootExit']\n  } else {\n    events = getEvents(node)\n  }\n\n  return {\n    node,\n    events,\n    eventIndex: 0,\n    visitors: [],\n    visitorIndex: 0,\n    iterator: 0\n  }\n}\n\nfunction cleanMarks(node) {\n  node[isClean] = false\n  if (node.nodes) node.nodes.forEach(i => cleanMarks(i))\n  return node\n}\n\nlet postcss = {}\n\nclass LazyResult {\n  constructor(processor, css, opts) {\n    this.stringified = false\n    this.processed = false\n\n    let root\n    if (\n      typeof css === 'object' &&\n      css !== null &&\n      (css.type === 'root' || css.type === 'document')\n    ) {\n      root = cleanMarks(css)\n    } else if (css instanceof LazyResult || css instanceof Result) {\n      root = cleanMarks(css.root)\n      if (css.map) {\n        if (typeof opts.map === 'undefined') opts.map = {}\n        if (!opts.map.inline) opts.map.inline = false\n        opts.map.prev = css.map\n      }\n    } else {\n      let parser = parse\n      if (opts.syntax) parser = opts.syntax.parse\n      if (opts.parser) parser = opts.parser\n      if (parser.parse) parser = parser.parse\n\n      try {\n        root = parser(css, opts)\n      } catch (error) {\n        this.processed = true\n        this.error = error\n      }\n\n      if (root && !root[my]) {\n        /* c8 ignore next 2 */\n        Container.rebuild(root)\n      }\n    }\n\n    this.result = new Result(processor, root, opts)\n    this.helpers = { ...postcss, result: this.result, postcss }\n    this.plugins = this.processor.plugins.map(plugin => {\n      if (typeof plugin === 'object' && plugin.prepare) {\n        return { ...plugin, ...plugin.prepare(this.result) }\n      } else {\n        return plugin\n      }\n    })\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'LazyResult'\n  }\n\n  get processor() {\n    return this.result.processor\n  }\n\n  get opts() {\n    return this.result.opts\n  }\n\n  get css() {\n    return this.stringify().css\n  }\n\n  get content() {\n    return this.stringify().content\n  }\n\n  get map() {\n    return this.stringify().map\n  }\n\n  get root() {\n    return this.sync().root\n  }\n\n  get messages() {\n    return this.sync().messages\n  }\n\n  warnings() {\n    return this.sync().warnings()\n  }\n\n  toString() {\n    return this.css\n  }\n\n  then(onFulfilled, onRejected) {\n    if (true) {\n      if (!('from' in this.opts)) {\n        warnOnce(\n          'Without `from` option PostCSS could generate wrong source map ' +\n            'and will not find Browserslist config. Set it to CSS file path ' +\n            'or to `undefined` to prevent this warning.'\n        )\n      }\n    }\n    return this.async().then(onFulfilled, onRejected)\n  }\n\n  catch(onRejected) {\n    return this.async().catch(onRejected)\n  }\n\n  finally(onFinally) {\n    return this.async().then(onFinally, onFinally)\n  }\n\n  async() {\n    if (this.error) return Promise.reject(this.error)\n    if (this.processed) return Promise.resolve(this.result)\n    if (!this.processing) {\n      this.processing = this.runAsync()\n    }\n    return this.processing\n  }\n\n  sync() {\n    if (this.error) throw this.error\n    if (this.processed) return this.result\n    this.processed = true\n\n    if (this.processing) {\n      throw this.getAsyncError()\n    }\n\n    for (let plugin of this.plugins) {\n      let promise = this.runOnRoot(plugin)\n      if (isPromise(promise)) {\n        throw this.getAsyncError()\n      }\n    }\n\n    this.prepareVisitors()\n    if (this.hasListener) {\n      let root = this.result.root\n      while (!root[isClean]) {\n        root[isClean] = true\n        this.walkSync(root)\n      }\n      if (this.listeners.OnceExit) {\n        if (root.type === 'document') {\n          for (let subRoot of root.nodes) {\n            this.visitSync(this.listeners.OnceExit, subRoot)\n          }\n        } else {\n          this.visitSync(this.listeners.OnceExit, root)\n        }\n      }\n    }\n\n    return this.result\n  }\n\n  stringify() {\n    if (this.error) throw this.error\n    if (this.stringified) return this.result\n    this.stringified = true\n\n    this.sync()\n\n    let opts = this.result.opts\n    let str = stringify\n    if (opts.syntax) str = opts.syntax.stringify\n    if (opts.stringifier) str = opts.stringifier\n    if (str.stringify) str = str.stringify\n\n    let map = new MapGenerator(str, this.result.root, this.result.opts)\n    let data = map.generate()\n    this.result.css = data[0]\n    this.result.map = data[1]\n\n    return this.result\n  }\n\n  walkSync(node) {\n    node[isClean] = true\n    let events = getEvents(node)\n    for (let event of events) {\n      if (event === CHILDREN) {\n        if (node.nodes) {\n          node.each(child => {\n            if (!child[isClean]) this.walkSync(child)\n          })\n        }\n      } else {\n        let visitors = this.listeners[event]\n        if (visitors) {\n          if (this.visitSync(visitors, node.toProxy())) return\n        }\n      }\n    }\n  }\n\n  visitSync(visitors, node) {\n    for (let [plugin, visitor] of visitors) {\n      this.result.lastPlugin = plugin\n      let promise\n      try {\n        promise = visitor(node, this.helpers)\n      } catch (e) {\n        throw this.handleError(e, node.proxyOf)\n      }\n      if (node.type !== 'root' && node.type !== 'document' && !node.parent) {\n        return true\n      }\n      if (isPromise(promise)) {\n        throw this.getAsyncError()\n      }\n    }\n  }\n\n  runOnRoot(plugin) {\n    this.result.lastPlugin = plugin\n    try {\n      if (typeof plugin === 'object' && plugin.Once) {\n        if (this.result.root.type === 'document') {\n          let roots = this.result.root.nodes.map(root =>\n            plugin.Once(root, this.helpers)\n          )\n\n          if (isPromise(roots[0])) {\n            return Promise.all(roots)\n          }\n\n          return roots\n        }\n\n        return plugin.Once(this.result.root, this.helpers)\n      } else if (typeof plugin === 'function') {\n        return plugin(this.result.root, this.result)\n      }\n    } catch (error) {\n      throw this.handleError(error)\n    }\n  }\n\n  getAsyncError() {\n    throw new Error('Use process(css).then(cb) to work with async plugins')\n  }\n\n  handleError(error, node) {\n    let plugin = this.result.lastPlugin\n    try {\n      if (node) node.addToError(error)\n      this.error = error\n      if (error.name === 'CssSyntaxError' && !error.plugin) {\n        error.plugin = plugin.postcssPlugin\n        error.setMessage()\n      } else if (plugin.postcssVersion) {\n        if (true) {\n          let pluginName = plugin.postcssPlugin\n          let pluginVer = plugin.postcssVersion\n          let runtimeVer = this.result.processor.version\n          let a = pluginVer.split('.')\n          let b = runtimeVer.split('.')\n\n          if (a[0] !== b[0] || parseInt(a[1]) > parseInt(b[1])) {\n            // eslint-disable-next-line no-console\n            console.error(\n              'Unknown error from PostCSS plugin. Your current PostCSS ' +\n                'version is ' +\n                runtimeVer +\n                ', but ' +\n                pluginName +\n                ' uses ' +\n                pluginVer +\n                '. Perhaps this is the source of the error below.'\n            )\n          }\n        }\n      }\n    } catch (err) {\n      /* c8 ignore next 3 */\n      // eslint-disable-next-line no-console\n      if (console && console.error) console.error(err)\n    }\n    return error\n  }\n\n  async runAsync() {\n    this.plugin = 0\n    for (let i = 0; i < this.plugins.length; i++) {\n      let plugin = this.plugins[i]\n      let promise = this.runOnRoot(plugin)\n      if (isPromise(promise)) {\n        try {\n          await promise\n        } catch (error) {\n          throw this.handleError(error)\n        }\n      }\n    }\n\n    this.prepareVisitors()\n    if (this.hasListener) {\n      let root = this.result.root\n      while (!root[isClean]) {\n        root[isClean] = true\n        let stack = [toStack(root)]\n        while (stack.length > 0) {\n          let promise = this.visitTick(stack)\n          if (isPromise(promise)) {\n            try {\n              await promise\n            } catch (e) {\n              let node = stack[stack.length - 1].node\n              throw this.handleError(e, node)\n            }\n          }\n        }\n      }\n\n      if (this.listeners.OnceExit) {\n        for (let [plugin, visitor] of this.listeners.OnceExit) {\n          this.result.lastPlugin = plugin\n          try {\n            if (root.type === 'document') {\n              let roots = root.nodes.map(subRoot =>\n                visitor(subRoot, this.helpers)\n              )\n\n              await Promise.all(roots)\n            } else {\n              await visitor(root, this.helpers)\n            }\n          } catch (e) {\n            throw this.handleError(e)\n          }\n        }\n      }\n    }\n\n    this.processed = true\n    return this.stringify()\n  }\n\n  prepareVisitors() {\n    this.listeners = {}\n    let add = (plugin, type, cb) => {\n      if (!this.listeners[type]) this.listeners[type] = []\n      this.listeners[type].push([plugin, cb])\n    }\n    for (let plugin of this.plugins) {\n      if (typeof plugin === 'object') {\n        for (let event in plugin) {\n          if (!PLUGIN_PROPS[event] && /^[A-Z]/.test(event)) {\n            throw new Error(\n              `Unknown event ${event} in ${plugin.postcssPlugin}. ` +\n                `Try to update PostCSS (${this.processor.version} now).`\n            )\n          }\n          if (!NOT_VISITORS[event]) {\n            if (typeof plugin[event] === 'object') {\n              for (let filter in plugin[event]) {\n                if (filter === '*') {\n                  add(plugin, event, plugin[event][filter])\n                } else {\n                  add(\n                    plugin,\n                    event + '-' + filter.toLowerCase(),\n                    plugin[event][filter]\n                  )\n                }\n              }\n            } else if (typeof plugin[event] === 'function') {\n              add(plugin, event, plugin[event])\n            }\n          }\n        }\n      }\n    }\n    this.hasListener = Object.keys(this.listeners).length > 0\n  }\n\n  visitTick(stack) {\n    let visit = stack[stack.length - 1]\n    let { node, visitors } = visit\n\n    if (node.type !== 'root' && node.type !== 'document' && !node.parent) {\n      stack.pop()\n      return\n    }\n\n    if (visitors.length > 0 && visit.visitorIndex < visitors.length) {\n      let [plugin, visitor] = visitors[visit.visitorIndex]\n      visit.visitorIndex += 1\n      if (visit.visitorIndex === visitors.length) {\n        visit.visitors = []\n        visit.visitorIndex = 0\n      }\n      this.result.lastPlugin = plugin\n      try {\n        return visitor(node.toProxy(), this.helpers)\n      } catch (e) {\n        throw this.handleError(e, node)\n      }\n    }\n\n    if (visit.iterator !== 0) {\n      let iterator = visit.iterator\n      let child\n      while ((child = node.nodes[node.indexes[iterator]])) {\n        node.indexes[iterator] += 1\n        if (!child[isClean]) {\n          child[isClean] = true\n          stack.push(toStack(child))\n          return\n        }\n      }\n      visit.iterator = 0\n      delete node.indexes[iterator]\n    }\n\n    let events = visit.events\n    while (visit.eventIndex < events.length) {\n      let event = events[visit.eventIndex]\n      visit.eventIndex += 1\n      if (event === CHILDREN) {\n        if (node.nodes && node.nodes.length) {\n          node[isClean] = true\n          visit.iterator = node.getIterator()\n        }\n        return\n      } else if (this.listeners[event]) {\n        visit.visitors = this.listeners[event]\n        return\n      }\n    }\n    stack.pop()\n  }\n}\n\nLazyResult.registerPostcss = dependant => {\n  postcss = dependant\n}\n\nmodule.exports = LazyResult\nLazyResult.default = LazyResult\n\nRoot.registerLazyResult(LazyResult)\nDocument.registerLazyResult(LazyResult)\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/postcss/lib/lazy-result.js?");

/***/ }),

/***/ "./node_modules/postcss/lib/list.js":
/*!******************************************!*\
  !*** ./node_modules/postcss/lib/list.js ***!
  \******************************************/
/***/ ((module) => {

"use strict";
eval("\n\nlet list = {\n  split(string, separators, last) {\n    let array = []\n    let current = ''\n    let split = false\n\n    let func = 0\n    let inQuote = false\n    let prevQuote = ''\n    let escape = false\n\n    for (let letter of string) {\n      if (escape) {\n        escape = false\n      } else if (letter === '\\\\') {\n        escape = true\n      } else if (inQuote) {\n        if (letter === prevQuote) {\n          inQuote = false\n        }\n      } else if (letter === '\"' || letter === \"'\") {\n        inQuote = true\n        prevQuote = letter\n      } else if (letter === '(') {\n        func += 1\n      } else if (letter === ')') {\n        if (func > 0) func -= 1\n      } else if (func === 0) {\n        if (separators.includes(letter)) split = true\n      }\n\n      if (split) {\n        if (current !== '') array.push(current.trim())\n        current = ''\n        split = false\n      } else {\n        current += letter\n      }\n    }\n\n    if (last || current !== '') array.push(current.trim())\n    return array\n  },\n\n  space(string) {\n    let spaces = [' ', '\\n', '\\t']\n    return list.split(string, spaces)\n  },\n\n  comma(string) {\n    return list.split(string, [','], true)\n  }\n}\n\nmodule.exports = list\nlist.default = list\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/postcss/lib/list.js?");

/***/ }),

/***/ "./node_modules/postcss/lib/map-generator.js":
/*!***************************************************!*\
  !*** ./node_modules/postcss/lib/map-generator.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nlet { SourceMapConsumer, SourceMapGenerator } = __webpack_require__(/*! source-map-js */ \"?b8cb\")\nlet { dirname, resolve, relative, sep } = __webpack_require__(/*! path */ \"?6197\")\nlet { pathToFileURL } = __webpack_require__(/*! url */ \"?c717\")\n\nlet Input = __webpack_require__(/*! ./input */ \"./node_modules/postcss/lib/input.js\")\n\nlet sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator)\nlet pathAvailable = Boolean(dirname && resolve && relative && sep)\n\nclass MapGenerator {\n  constructor(stringify, root, opts, cssString) {\n    this.stringify = stringify\n    this.mapOpts = opts.map || {}\n    this.root = root\n    this.opts = opts\n    this.css = cssString\n    this.usesFileUrls = !this.mapOpts.from && this.mapOpts.absolute\n  }\n\n  isMap() {\n    if (typeof this.opts.map !== 'undefined') {\n      return !!this.opts.map\n    }\n    return this.previous().length > 0\n  }\n\n  previous() {\n    if (!this.previousMaps) {\n      this.previousMaps = []\n      if (this.root) {\n        this.root.walk(node => {\n          if (node.source && node.source.input.map) {\n            let map = node.source.input.map\n            if (!this.previousMaps.includes(map)) {\n              this.previousMaps.push(map)\n            }\n          }\n        })\n      } else {\n        let input = new Input(this.css, this.opts)\n        if (input.map) this.previousMaps.push(input.map)\n      }\n    }\n\n    return this.previousMaps\n  }\n\n  isInline() {\n    if (typeof this.mapOpts.inline !== 'undefined') {\n      return this.mapOpts.inline\n    }\n\n    let annotation = this.mapOpts.annotation\n    if (typeof annotation !== 'undefined' && annotation !== true) {\n      return false\n    }\n\n    if (this.previous().length) {\n      return this.previous().some(i => i.inline)\n    }\n    return true\n  }\n\n  isSourcesContent() {\n    if (typeof this.mapOpts.sourcesContent !== 'undefined') {\n      return this.mapOpts.sourcesContent\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.withContent())\n    }\n    return true\n  }\n\n  clearAnnotation() {\n    if (this.mapOpts.annotation === false) return\n\n    if (this.root) {\n      let node\n      for (let i = this.root.nodes.length - 1; i >= 0; i--) {\n        node = this.root.nodes[i]\n        if (node.type !== 'comment') continue\n        if (node.text.indexOf('# sourceMappingURL=') === 0) {\n          this.root.removeChild(i)\n        }\n      }\n    } else if (this.css) {\n      this.css = this.css.replace(/(\\n)?\\/\\*#[\\S\\s]*?\\*\\/$/gm, '')\n    }\n  }\n\n  setSourcesContent() {\n    let already = {}\n    if (this.root) {\n      this.root.walk(node => {\n        if (node.source) {\n          let from = node.source.input.from\n          if (from && !already[from]) {\n            already[from] = true\n            let fromUrl = this.usesFileUrls\n              ? this.toFileUrl(from)\n              : this.toUrl(this.path(from))\n            this.map.setSourceContent(fromUrl, node.source.input.css)\n          }\n        }\n      })\n    } else if (this.css) {\n      let from = this.opts.from\n        ? this.toUrl(this.path(this.opts.from))\n        : '<no source>'\n      this.map.setSourceContent(from, this.css)\n    }\n  }\n\n  applyPrevMaps() {\n    for (let prev of this.previous()) {\n      let from = this.toUrl(this.path(prev.file))\n      let root = prev.root || dirname(prev.file)\n      let map\n\n      if (this.mapOpts.sourcesContent === false) {\n        map = new SourceMapConsumer(prev.text)\n        if (map.sourcesContent) {\n          map.sourcesContent = map.sourcesContent.map(() => null)\n        }\n      } else {\n        map = prev.consumer()\n      }\n\n      this.map.applySourceMap(map, from, this.toUrl(this.path(root)))\n    }\n  }\n\n  isAnnotation() {\n    if (this.isInline()) {\n      return true\n    }\n    if (typeof this.mapOpts.annotation !== 'undefined') {\n      return this.mapOpts.annotation\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.annotation)\n    }\n    return true\n  }\n\n  toBase64(str) {\n    if (Buffer) {\n      return Buffer.from(str).toString('base64')\n    } else {\n      return window.btoa(unescape(encodeURIComponent(str)))\n    }\n  }\n\n  addAnnotation() {\n    let content\n\n    if (this.isInline()) {\n      content =\n        'data:application/json;base64,' + this.toBase64(this.map.toString())\n    } else if (typeof this.mapOpts.annotation === 'string') {\n      content = this.mapOpts.annotation\n    } else if (typeof this.mapOpts.annotation === 'function') {\n      content = this.mapOpts.annotation(this.opts.to, this.root)\n    } else {\n      content = this.outputFile() + '.map'\n    }\n    let eol = '\\n'\n    if (this.css.includes('\\r\\n')) eol = '\\r\\n'\n\n    this.css += eol + '/*# sourceMappingURL=' + content + ' */'\n  }\n\n  outputFile() {\n    if (this.opts.to) {\n      return this.path(this.opts.to)\n    } else if (this.opts.from) {\n      return this.path(this.opts.from)\n    } else {\n      return 'to.css'\n    }\n  }\n\n  generateMap() {\n    if (this.root) {\n      this.generateString()\n    } else if (this.previous().length === 1) {\n      let prev = this.previous()[0].consumer()\n      prev.file = this.outputFile()\n      this.map = SourceMapGenerator.fromSourceMap(prev)\n    } else {\n      this.map = new SourceMapGenerator({ file: this.outputFile() })\n      this.map.addMapping({\n        source: this.opts.from\n          ? this.toUrl(this.path(this.opts.from))\n          : '<no source>',\n        generated: { line: 1, column: 0 },\n        original: { line: 1, column: 0 }\n      })\n    }\n\n    if (this.isSourcesContent()) this.setSourcesContent()\n    if (this.root && this.previous().length > 0) this.applyPrevMaps()\n    if (this.isAnnotation()) this.addAnnotation()\n\n    if (this.isInline()) {\n      return [this.css]\n    } else {\n      return [this.css, this.map]\n    }\n  }\n\n  path(file) {\n    if (file.indexOf('<') === 0) return file\n    if (/^\\w+:\\/\\//.test(file)) return file\n    if (this.mapOpts.absolute) return file\n\n    let from = this.opts.to ? dirname(this.opts.to) : '.'\n\n    if (typeof this.mapOpts.annotation === 'string') {\n      from = dirname(resolve(from, this.mapOpts.annotation))\n    }\n\n    file = relative(from, file)\n    return file\n  }\n\n  toUrl(path) {\n    if (sep === '\\\\') {\n      path = path.replace(/\\\\/g, '/')\n    }\n    return encodeURI(path).replace(/[#?]/g, encodeURIComponent)\n  }\n\n  toFileUrl(path) {\n    if (pathToFileURL) {\n      return pathToFileURL(path).toString()\n    } else {\n      throw new Error(\n        '`map.absolute` option is not available in this PostCSS build'\n      )\n    }\n  }\n\n  sourcePath(node) {\n    if (this.mapOpts.from) {\n      return this.toUrl(this.mapOpts.from)\n    } else if (this.usesFileUrls) {\n      return this.toFileUrl(node.source.input.from)\n    } else {\n      return this.toUrl(this.path(node.source.input.from))\n    }\n  }\n\n  generateString() {\n    this.css = ''\n    this.map = new SourceMapGenerator({ file: this.outputFile() })\n\n    let line = 1\n    let column = 1\n\n    let noSource = '<no source>'\n    let mapping = {\n      source: '',\n      generated: { line: 0, column: 0 },\n      original: { line: 0, column: 0 }\n    }\n\n    let lines, last\n    this.stringify(this.root, (str, node, type) => {\n      this.css += str\n\n      if (node && type !== 'end') {\n        mapping.generated.line = line\n        mapping.generated.column = column - 1\n        if (node.source && node.source.start) {\n          mapping.source = this.sourcePath(node)\n          mapping.original.line = node.source.start.line\n          mapping.original.column = node.source.start.column - 1\n          this.map.addMapping(mapping)\n        } else {\n          mapping.source = noSource\n          mapping.original.line = 1\n          mapping.original.column = 0\n          this.map.addMapping(mapping)\n        }\n      }\n\n      lines = str.match(/\\n/g)\n      if (lines) {\n        line += lines.length\n        last = str.lastIndexOf('\\n')\n        column = str.length - last\n      } else {\n        column += str.length\n      }\n\n      if (node && type !== 'start') {\n        let p = node.parent || { raws: {} }\n        if (node.type !== 'decl' || node !== p.last || p.raws.semicolon) {\n          if (node.source && node.source.end) {\n            mapping.source = this.sourcePath(node)\n            mapping.original.line = node.source.end.line\n            mapping.original.column = node.source.end.column - 1\n            mapping.generated.line = line\n            mapping.generated.column = column - 2\n            this.map.addMapping(mapping)\n          } else {\n            mapping.source = noSource\n            mapping.original.line = 1\n            mapping.original.column = 0\n            mapping.generated.line = line\n            mapping.generated.column = column - 1\n            this.map.addMapping(mapping)\n          }\n        }\n      }\n    })\n  }\n\n  generate() {\n    this.clearAnnotation()\n    if (pathAvailable && sourceMapAvailable && this.isMap()) {\n      return this.generateMap()\n    } else {\n      let result = ''\n      this.stringify(this.root, i => {\n        result += i\n      })\n      return [result]\n    }\n  }\n}\n\nmodule.exports = MapGenerator\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/postcss/lib/map-generator.js?");

/***/ }),

/***/ "./node_modules/postcss/lib/no-work-result.js":
/*!****************************************************!*\
  !*** ./node_modules/postcss/lib/no-work-result.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nlet MapGenerator = __webpack_require__(/*! ./map-generator */ \"./node_modules/postcss/lib/map-generator.js\")\nlet stringify = __webpack_require__(/*! ./stringify */ \"./node_modules/postcss/lib/stringify.js\")\nlet warnOnce = __webpack_require__(/*! ./warn-once */ \"./node_modules/postcss/lib/warn-once.js\")\nlet parse = __webpack_require__(/*! ./parse */ \"./node_modules/postcss/lib/parse.js\")\nconst Result = __webpack_require__(/*! ./result */ \"./node_modules/postcss/lib/result.js\")\n\nclass NoWorkResult {\n  constructor(processor, css, opts) {\n    css = css.toString()\n    this.stringified = false\n\n    this._processor = processor\n    this._css = css\n    this._opts = opts\n    this._map = undefined\n    let root\n\n    let str = stringify\n    this.result = new Result(this._processor, root, this._opts)\n    this.result.css = css\n\n    let self = this\n    Object.defineProperty(this.result, 'root', {\n      get() {\n        return self.root\n      }\n    })\n\n    let map = new MapGenerator(str, root, this._opts, css)\n    if (map.isMap()) {\n      let [generatedCSS, generatedMap] = map.generate()\n      if (generatedCSS) {\n        this.result.css = generatedCSS\n      }\n      if (generatedMap) {\n        this.result.map = generatedMap\n      }\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'NoWorkResult'\n  }\n\n  get processor() {\n    return this.result.processor\n  }\n\n  get opts() {\n    return this.result.opts\n  }\n\n  get css() {\n    return this.result.css\n  }\n\n  get content() {\n    return this.result.css\n  }\n\n  get map() {\n    return this.result.map\n  }\n\n  get root() {\n    if (this._root) {\n      return this._root\n    }\n\n    let root\n    let parser = parse\n\n    try {\n      root = parser(this._css, this._opts)\n    } catch (error) {\n      this.error = error\n    }\n\n    if (this.error) {\n      throw this.error\n    } else {\n      this._root = root\n      return root\n    }\n  }\n\n  get messages() {\n    return []\n  }\n\n  warnings() {\n    return []\n  }\n\n  toString() {\n    return this._css\n  }\n\n  then(onFulfilled, onRejected) {\n    if (true) {\n      if (!('from' in this._opts)) {\n        warnOnce(\n          'Without `from` option PostCSS could generate wrong source map ' +\n            'and will not find Browserslist config. Set it to CSS file path ' +\n            'or to `undefined` to prevent this warning.'\n        )\n      }\n    }\n\n    return this.async().then(onFulfilled, onRejected)\n  }\n\n  catch(onRejected) {\n    return this.async().catch(onRejected)\n  }\n\n  finally(onFinally) {\n    return this.async().then(onFinally, onFinally)\n  }\n\n  async() {\n    if (this.error) return Promise.reject(this.error)\n    return Promise.resolve(this.result)\n  }\n\n  sync() {\n    if (this.error) throw this.error\n    return this.result\n  }\n}\n\nmodule.exports = NoWorkResult\nNoWorkResult.default = NoWorkResult\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/postcss/lib/no-work-result.js?");

/***/ }),

/***/ "./node_modules/postcss/lib/node.js":
/*!******************************************!*\
  !*** ./node_modules/postcss/lib/node.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nlet { isClean, my } = __webpack_require__(/*! ./symbols */ \"./node_modules/postcss/lib/symbols.js\")\nlet CssSyntaxError = __webpack_require__(/*! ./css-syntax-error */ \"./node_modules/postcss/lib/css-syntax-error.js\")\nlet Stringifier = __webpack_require__(/*! ./stringifier */ \"./node_modules/postcss/lib/stringifier.js\")\nlet stringify = __webpack_require__(/*! ./stringify */ \"./node_modules/postcss/lib/stringify.js\")\n\nfunction cloneNode(obj, parent) {\n  let cloned = new obj.constructor()\n\n  for (let i in obj) {\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) {\n      /* c8 ignore next 2 */\n      continue\n    }\n    if (i === 'proxyCache') continue\n    let value = obj[i]\n    let type = typeof value\n\n    if (i === 'parent' && type === 'object') {\n      if (parent) cloned[i] = parent\n    } else if (i === 'source') {\n      cloned[i] = value\n    } else if (Array.isArray(value)) {\n      cloned[i] = value.map(j => cloneNode(j, cloned))\n    } else {\n      if (type === 'object' && value !== null) value = cloneNode(value)\n      cloned[i] = value\n    }\n  }\n\n  return cloned\n}\n\nclass Node {\n  constructor(defaults = {}) {\n    this.raws = {}\n    this[isClean] = false\n    this[my] = true\n\n    for (let name in defaults) {\n      if (name === 'nodes') {\n        this.nodes = []\n        for (let node of defaults[name]) {\n          if (typeof node.clone === 'function') {\n            this.append(node.clone())\n          } else {\n            this.append(node)\n          }\n        }\n      } else {\n        this[name] = defaults[name]\n      }\n    }\n  }\n\n  error(message, opts = {}) {\n    if (this.source) {\n      let { start, end } = this.rangeBy(opts)\n      return this.source.input.error(\n        message,\n        { line: start.line, column: start.column },\n        { line: end.line, column: end.column },\n        opts\n      )\n    }\n    return new CssSyntaxError(message)\n  }\n\n  warn(result, text, opts) {\n    let data = { node: this }\n    for (let i in opts) data[i] = opts[i]\n    return result.warn(text, data)\n  }\n\n  remove() {\n    if (this.parent) {\n      this.parent.removeChild(this)\n    }\n    this.parent = undefined\n    return this\n  }\n\n  toString(stringifier = stringify) {\n    if (stringifier.stringify) stringifier = stringifier.stringify\n    let result = ''\n    stringifier(this, i => {\n      result += i\n    })\n    return result\n  }\n\n  assign(overrides = {}) {\n    for (let name in overrides) {\n      this[name] = overrides[name]\n    }\n    return this\n  }\n\n  clone(overrides = {}) {\n    let cloned = cloneNode(this)\n    for (let name in overrides) {\n      cloned[name] = overrides[name]\n    }\n    return cloned\n  }\n\n  cloneBefore(overrides = {}) {\n    let cloned = this.clone(overrides)\n    this.parent.insertBefore(this, cloned)\n    return cloned\n  }\n\n  cloneAfter(overrides = {}) {\n    let cloned = this.clone(overrides)\n    this.parent.insertAfter(this, cloned)\n    return cloned\n  }\n\n  replaceWith(...nodes) {\n    if (this.parent) {\n      let bookmark = this\n      let foundSelf = false\n      for (let node of nodes) {\n        if (node === this) {\n          foundSelf = true\n        } else if (foundSelf) {\n          this.parent.insertAfter(bookmark, node)\n          bookmark = node\n        } else {\n          this.parent.insertBefore(bookmark, node)\n        }\n      }\n\n      if (!foundSelf) {\n        this.remove()\n      }\n    }\n\n    return this\n  }\n\n  next() {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index + 1]\n  }\n\n  prev() {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index - 1]\n  }\n\n  before(add) {\n    this.parent.insertBefore(this, add)\n    return this\n  }\n\n  after(add) {\n    this.parent.insertAfter(this, add)\n    return this\n  }\n\n  root() {\n    let result = this\n    while (result.parent && result.parent.type !== 'document') {\n      result = result.parent\n    }\n    return result\n  }\n\n  raw(prop, defaultType) {\n    let str = new Stringifier()\n    return str.raw(this, prop, defaultType)\n  }\n\n  cleanRaws(keepBetween) {\n    delete this.raws.before\n    delete this.raws.after\n    if (!keepBetween) delete this.raws.between\n  }\n\n  toJSON(_, inputs) {\n    let fixed = {}\n    let emitInputs = inputs == null\n    inputs = inputs || new Map()\n    let inputsNextIndex = 0\n\n    for (let name in this) {\n      if (!Object.prototype.hasOwnProperty.call(this, name)) {\n        /* c8 ignore next 2 */\n        continue\n      }\n      if (name === 'parent' || name === 'proxyCache') continue\n      let value = this[name]\n\n      if (Array.isArray(value)) {\n        fixed[name] = value.map(i => {\n          if (typeof i === 'object' && i.toJSON) {\n            return i.toJSON(null, inputs)\n          } else {\n            return i\n          }\n        })\n      } else if (typeof value === 'object' && value.toJSON) {\n        fixed[name] = value.toJSON(null, inputs)\n      } else if (name === 'source') {\n        let inputId = inputs.get(value.input)\n        if (inputId == null) {\n          inputId = inputsNextIndex\n          inputs.set(value.input, inputsNextIndex)\n          inputsNextIndex++\n        }\n        fixed[name] = {\n          inputId,\n          start: value.start,\n          end: value.end\n        }\n      } else {\n        fixed[name] = value\n      }\n    }\n\n    if (emitInputs) {\n      fixed.inputs = [...inputs.keys()].map(input => input.toJSON())\n    }\n\n    return fixed\n  }\n\n  positionInside(index) {\n    let string = this.toString()\n    let column = this.source.start.column\n    let line = this.source.start.line\n\n    for (let i = 0; i < index; i++) {\n      if (string[i] === '\\n') {\n        column = 1\n        line += 1\n      } else {\n        column += 1\n      }\n    }\n\n    return { line, column }\n  }\n\n  positionBy(opts) {\n    let pos = this.source.start\n    if (opts.index) {\n      pos = this.positionInside(opts.index)\n    } else if (opts.word) {\n      let index = this.toString().indexOf(opts.word)\n      if (index !== -1) pos = this.positionInside(index)\n    }\n    return pos\n  }\n\n  rangeBy(opts) {\n    let start = {\n      line: this.source.start.line,\n      column: this.source.start.column\n    }\n    let end = this.source.end\n      ? {\n          line: this.source.end.line,\n          column: this.source.end.column + 1\n        }\n      : {\n          line: start.line,\n          column: start.column + 1\n        }\n\n    if (opts.word) {\n      let index = this.toString().indexOf(opts.word)\n      if (index !== -1) {\n        start = this.positionInside(index)\n        end = this.positionInside(index + opts.word.length)\n      }\n    } else {\n      if (opts.start) {\n        start = {\n          line: opts.start.line,\n          column: opts.start.column\n        }\n      } else if (opts.index) {\n        start = this.positionInside(opts.index)\n      }\n\n      if (opts.end) {\n        end = {\n          line: opts.end.line,\n          column: opts.end.column\n        }\n      } else if (opts.endIndex) {\n        end = this.positionInside(opts.endIndex)\n      } else if (opts.index) {\n        end = this.positionInside(opts.index + 1)\n      }\n    }\n\n    if (\n      end.line < start.line ||\n      (end.line === start.line && end.column <= start.column)\n    ) {\n      end = { line: start.line, column: start.column + 1 }\n    }\n\n    return { start, end }\n  }\n\n  getProxyProcessor() {\n    return {\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (\n          prop === 'prop' ||\n          prop === 'value' ||\n          prop === 'name' ||\n          prop === 'params' ||\n          prop === 'important' ||\n          /* c8 ignore next */\n          prop === 'text'\n        ) {\n          node.markDirty()\n        }\n        return true\n      },\n\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else {\n          return node[prop]\n        }\n      }\n    }\n  }\n\n  toProxy() {\n    if (!this.proxyCache) {\n      this.proxyCache = new Proxy(this, this.getProxyProcessor())\n    }\n    return this.proxyCache\n  }\n\n  addToError(error) {\n    error.postcssNode = this\n    if (error.stack && this.source && /\\n\\s{4}at /.test(error.stack)) {\n      let s = this.source\n      error.stack = error.stack.replace(\n        /\\n\\s{4}at /,\n        `$&${s.input.from}:${s.start.line}:${s.start.column}$&`\n      )\n    }\n    return error\n  }\n\n  markDirty() {\n    if (this[isClean]) {\n      this[isClean] = false\n      let next = this\n      while ((next = next.parent)) {\n        next[isClean] = false\n      }\n    }\n  }\n\n  get proxyOf() {\n    return this\n  }\n}\n\nmodule.exports = Node\nNode.default = Node\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/postcss/lib/node.js?");

/***/ }),

/***/ "./node_modules/postcss/lib/parse.js":
/*!*******************************************!*\
  !*** ./node_modules/postcss/lib/parse.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nlet Container = __webpack_require__(/*! ./container */ \"./node_modules/postcss/lib/container.js\")\nlet Parser = __webpack_require__(/*! ./parser */ \"./node_modules/postcss/lib/parser.js\")\nlet Input = __webpack_require__(/*! ./input */ \"./node_modules/postcss/lib/input.js\")\n\nfunction parse(css, opts) {\n  let input = new Input(css, opts)\n  let parser = new Parser(input)\n  try {\n    parser.parse()\n  } catch (e) {\n    if (true) {\n      if (e.name === 'CssSyntaxError' && opts && opts.from) {\n        if (/\\.scss$/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse SCSS with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-scss parser'\n        } else if (/\\.sass/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse Sass with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-sass parser'\n        } else if (/\\.less$/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse Less with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-less parser'\n        }\n      }\n    }\n    throw e\n  }\n\n  return parser.root\n}\n\nmodule.exports = parse\nparse.default = parse\n\nContainer.registerParse(parse)\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/postcss/lib/parse.js?");

/***/ }),

/***/ "./node_modules/postcss/lib/parser.js":
/*!********************************************!*\
  !*** ./node_modules/postcss/lib/parser.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nlet Declaration = __webpack_require__(/*! ./declaration */ \"./node_modules/postcss/lib/declaration.js\")\nlet tokenizer = __webpack_require__(/*! ./tokenize */ \"./node_modules/postcss/lib/tokenize.js\")\nlet Comment = __webpack_require__(/*! ./comment */ \"./node_modules/postcss/lib/comment.js\")\nlet AtRule = __webpack_require__(/*! ./at-rule */ \"./node_modules/postcss/lib/at-rule.js\")\nlet Root = __webpack_require__(/*! ./root */ \"./node_modules/postcss/lib/root.js\")\nlet Rule = __webpack_require__(/*! ./rule */ \"./node_modules/postcss/lib/rule.js\")\n\nconst SAFE_COMMENT_NEIGHBOR = {\n  empty: true,\n  space: true\n}\n\nfunction findLastWithPosition(tokens) {\n  for (let i = tokens.length - 1; i >= 0; i--) {\n    let token = tokens[i]\n    let pos = token[3] || token[2]\n    if (pos) return pos\n  }\n}\n\nclass Parser {\n  constructor(input) {\n    this.input = input\n\n    this.root = new Root()\n    this.current = this.root\n    this.spaces = ''\n    this.semicolon = false\n    this.customProperty = false\n\n    this.createTokenizer()\n    this.root.source = { input, start: { offset: 0, line: 1, column: 1 } }\n  }\n\n  createTokenizer() {\n    this.tokenizer = tokenizer(this.input)\n  }\n\n  parse() {\n    let token\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n\n      switch (token[0]) {\n        case 'space':\n          this.spaces += token[1]\n          break\n\n        case ';':\n          this.freeSemicolon(token)\n          break\n\n        case '}':\n          this.end(token)\n          break\n\n        case 'comment':\n          this.comment(token)\n          break\n\n        case 'at-word':\n          this.atrule(token)\n          break\n\n        case '{':\n          this.emptyRule(token)\n          break\n\n        default:\n          this.other(token)\n          break\n      }\n    }\n    this.endFile()\n  }\n\n  comment(token) {\n    let node = new Comment()\n    this.init(node, token[2])\n    node.source.end = this.getPosition(token[3] || token[2])\n\n    let text = token[1].slice(2, -2)\n    if (/^\\s*$/.test(text)) {\n      node.text = ''\n      node.raws.left = text\n      node.raws.right = ''\n    } else {\n      let match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/)\n      node.text = match[2]\n      node.raws.left = match[1]\n      node.raws.right = match[3]\n    }\n  }\n\n  emptyRule(token) {\n    let node = new Rule()\n    this.init(node, token[2])\n    node.selector = ''\n    node.raws.between = ''\n    this.current = node\n  }\n\n  other(start) {\n    let end = false\n    let type = null\n    let colon = false\n    let bracket = null\n    let brackets = []\n    let customProperty = start[1].startsWith('--')\n\n    let tokens = []\n    let token = start\n    while (token) {\n      type = token[0]\n      tokens.push(token)\n\n      if (type === '(' || type === '[') {\n        if (!bracket) bracket = token\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (customProperty && colon && type === '{') {\n        if (!bracket) bracket = token\n        brackets.push('}')\n      } else if (brackets.length === 0) {\n        if (type === ';') {\n          if (colon) {\n            this.decl(tokens, customProperty)\n            return\n          } else {\n            break\n          }\n        } else if (type === '{') {\n          this.rule(tokens)\n          return\n        } else if (type === '}') {\n          this.tokenizer.back(tokens.pop())\n          end = true\n          break\n        } else if (type === ':') {\n          colon = true\n        }\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n        if (brackets.length === 0) bracket = null\n      }\n\n      token = this.tokenizer.nextToken()\n    }\n\n    if (this.tokenizer.endOfFile()) end = true\n    if (brackets.length > 0) this.unclosedBracket(bracket)\n\n    if (end && colon) {\n      if (!customProperty) {\n        while (tokens.length) {\n          token = tokens[tokens.length - 1][0]\n          if (token !== 'space' && token !== 'comment') break\n          this.tokenizer.back(tokens.pop())\n        }\n      }\n      this.decl(tokens, customProperty)\n    } else {\n      this.unknownWord(tokens)\n    }\n  }\n\n  rule(tokens) {\n    tokens.pop()\n\n    let node = new Rule()\n    this.init(node, tokens[0][2])\n\n    node.raws.between = this.spacesAndCommentsFromEnd(tokens)\n    this.raw(node, 'selector', tokens)\n    this.current = node\n  }\n\n  decl(tokens, customProperty) {\n    let node = new Declaration()\n    this.init(node, tokens[0][2])\n\n    let last = tokens[tokens.length - 1]\n    if (last[0] === ';') {\n      this.semicolon = true\n      tokens.pop()\n    }\n\n    node.source.end = this.getPosition(\n      last[3] || last[2] || findLastWithPosition(tokens)\n    )\n\n    while (tokens[0][0] !== 'word') {\n      if (tokens.length === 1) this.unknownWord(tokens)\n      node.raws.before += tokens.shift()[1]\n    }\n    node.source.start = this.getPosition(tokens[0][2])\n\n    node.prop = ''\n    while (tokens.length) {\n      let type = tokens[0][0]\n      if (type === ':' || type === 'space' || type === 'comment') {\n        break\n      }\n      node.prop += tokens.shift()[1]\n    }\n\n    node.raws.between = ''\n\n    let token\n    while (tokens.length) {\n      token = tokens.shift()\n\n      if (token[0] === ':') {\n        node.raws.between += token[1]\n        break\n      } else {\n        if (token[0] === 'word' && /\\w/.test(token[1])) {\n          this.unknownWord([token])\n        }\n        node.raws.between += token[1]\n      }\n    }\n\n    if (node.prop[0] === '_' || node.prop[0] === '*') {\n      node.raws.before += node.prop[0]\n      node.prop = node.prop.slice(1)\n    }\n\n    let firstSpaces = []\n    let next\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      firstSpaces.push(tokens.shift())\n    }\n\n    this.precheckMissedSemicolon(tokens)\n\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      token = tokens[i]\n      if (token[1].toLowerCase() === '!important') {\n        node.important = true\n        let string = this.stringFrom(tokens, i)\n        string = this.spacesFromEnd(tokens) + string\n        if (string !== ' !important') node.raws.important = string\n        break\n      } else if (token[1].toLowerCase() === 'important') {\n        let cache = tokens.slice(0)\n        let str = ''\n        for (let j = i; j > 0; j--) {\n          let type = cache[j][0]\n          if (str.trim().indexOf('!') === 0 && type !== 'space') {\n            break\n          }\n          str = cache.pop()[1] + str\n        }\n        if (str.trim().indexOf('!') === 0) {\n          node.important = true\n          node.raws.important = str\n          tokens = cache\n        }\n      }\n\n      if (token[0] !== 'space' && token[0] !== 'comment') {\n        break\n      }\n    }\n\n    let hasWord = tokens.some(i => i[0] !== 'space' && i[0] !== 'comment')\n\n    if (hasWord) {\n      node.raws.between += firstSpaces.map(i => i[1]).join('')\n      firstSpaces = []\n    }\n    this.raw(node, 'value', firstSpaces.concat(tokens), customProperty)\n\n    if (node.value.includes(':') && !customProperty) {\n      this.checkMissedSemicolon(tokens)\n    }\n  }\n\n  atrule(token) {\n    let node = new AtRule()\n    node.name = token[1].slice(1)\n    if (node.name === '') {\n      this.unnamedAtrule(node, token)\n    }\n    this.init(node, token[2])\n\n    let type\n    let prev\n    let shift\n    let last = false\n    let open = false\n    let params = []\n    let brackets = []\n\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n      type = token[0]\n\n      if (type === '(' || type === '[') {\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (type === '{' && brackets.length > 0) {\n        brackets.push('}')\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n      }\n\n      if (brackets.length === 0) {\n        if (type === ';') {\n          node.source.end = this.getPosition(token[2])\n          this.semicolon = true\n          break\n        } else if (type === '{') {\n          open = true\n          break\n        } else if (type === '}') {\n          if (params.length > 0) {\n            shift = params.length - 1\n            prev = params[shift]\n            while (prev && prev[0] === 'space') {\n              prev = params[--shift]\n            }\n            if (prev) {\n              node.source.end = this.getPosition(prev[3] || prev[2])\n            }\n          }\n          this.end(token)\n          break\n        } else {\n          params.push(token)\n        }\n      } else {\n        params.push(token)\n      }\n\n      if (this.tokenizer.endOfFile()) {\n        last = true\n        break\n      }\n    }\n\n    node.raws.between = this.spacesAndCommentsFromEnd(params)\n    if (params.length) {\n      node.raws.afterName = this.spacesAndCommentsFromStart(params)\n      this.raw(node, 'params', params)\n      if (last) {\n        token = params[params.length - 1]\n        node.source.end = this.getPosition(token[3] || token[2])\n        this.spaces = node.raws.between\n        node.raws.between = ''\n      }\n    } else {\n      node.raws.afterName = ''\n      node.params = ''\n    }\n\n    if (open) {\n      node.nodes = []\n      this.current = node\n    }\n  }\n\n  end(token) {\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.semicolon = false\n\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n    this.spaces = ''\n\n    if (this.current.parent) {\n      this.current.source.end = this.getPosition(token[2])\n      this.current = this.current.parent\n    } else {\n      this.unexpectedClose(token)\n    }\n  }\n\n  endFile() {\n    if (this.current.parent) this.unclosedBlock()\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n  }\n\n  freeSemicolon(token) {\n    this.spaces += token[1]\n    if (this.current.nodes) {\n      let prev = this.current.nodes[this.current.nodes.length - 1]\n      if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {\n        prev.raws.ownSemicolon = this.spaces\n        this.spaces = ''\n      }\n    }\n  }\n\n  // Helpers\n\n  getPosition(offset) {\n    let pos = this.input.fromOffset(offset)\n    return {\n      offset,\n      line: pos.line,\n      column: pos.col\n    }\n  }\n\n  init(node, offset) {\n    this.current.push(node)\n    node.source = {\n      start: this.getPosition(offset),\n      input: this.input\n    }\n    node.raws.before = this.spaces\n    this.spaces = ''\n    if (node.type !== 'comment') this.semicolon = false\n  }\n\n  raw(node, prop, tokens, customProperty) {\n    let token, type\n    let length = tokens.length\n    let value = ''\n    let clean = true\n    let next, prev\n\n    for (let i = 0; i < length; i += 1) {\n      token = tokens[i]\n      type = token[0]\n      if (type === 'space' && i === length - 1 && !customProperty) {\n        clean = false\n      } else if (type === 'comment') {\n        prev = tokens[i - 1] ? tokens[i - 1][0] : 'empty'\n        next = tokens[i + 1] ? tokens[i + 1][0] : 'empty'\n        if (!SAFE_COMMENT_NEIGHBOR[prev] && !SAFE_COMMENT_NEIGHBOR[next]) {\n          if (value.slice(-1) === ',') {\n            clean = false\n          } else {\n            value += token[1]\n          }\n        } else {\n          clean = false\n        }\n      } else {\n        value += token[1]\n      }\n    }\n    if (!clean) {\n      let raw = tokens.reduce((all, i) => all + i[1], '')\n      node.raws[prop] = { value, raw }\n    }\n    node[prop] = value\n  }\n\n  spacesAndCommentsFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space' && lastTokenType !== 'comment') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  spacesAndCommentsFromStart(tokens) {\n    let next\n    let spaces = ''\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      spaces += tokens.shift()[1]\n    }\n    return spaces\n  }\n\n  spacesFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  stringFrom(tokens, from) {\n    let result = ''\n    for (let i = from; i < tokens.length; i++) {\n      result += tokens[i][1]\n    }\n    tokens.splice(from, tokens.length - from)\n    return result\n  }\n\n  colon(tokens) {\n    let brackets = 0\n    let token, type, prev\n    for (let [i, element] of tokens.entries()) {\n      token = element\n      type = token[0]\n\n      if (type === '(') {\n        brackets += 1\n      }\n      if (type === ')') {\n        brackets -= 1\n      }\n      if (brackets === 0 && type === ':') {\n        if (!prev) {\n          this.doubleColon(token)\n        } else if (prev[0] === 'word' && prev[1] === 'progid') {\n          continue\n        } else {\n          return i\n        }\n      }\n\n      prev = token\n    }\n    return false\n  }\n\n  // Errors\n\n  unclosedBracket(bracket) {\n    throw this.input.error(\n      'Unclosed bracket',\n      { offset: bracket[2] },\n      { offset: bracket[2] + 1 }\n    )\n  }\n\n  unknownWord(tokens) {\n    throw this.input.error(\n      'Unknown word',\n      { offset: tokens[0][2] },\n      { offset: tokens[0][2] + tokens[0][1].length }\n    )\n  }\n\n  unexpectedClose(token) {\n    throw this.input.error(\n      'Unexpected }',\n      { offset: token[2] },\n      { offset: token[2] + 1 }\n    )\n  }\n\n  unclosedBlock() {\n    let pos = this.current.source.start\n    throw this.input.error('Unclosed block', pos.line, pos.column)\n  }\n\n  doubleColon(token) {\n    throw this.input.error(\n      'Double colon',\n      { offset: token[2] },\n      { offset: token[2] + token[1].length }\n    )\n  }\n\n  unnamedAtrule(node, token) {\n    throw this.input.error(\n      'At-rule without name',\n      { offset: token[2] },\n      { offset: token[2] + token[1].length }\n    )\n  }\n\n  precheckMissedSemicolon(/* tokens */) {\n    // Hook for Safe Parser\n  }\n\n  checkMissedSemicolon(tokens) {\n    let colon = this.colon(tokens)\n    if (colon === false) return\n\n    let founded = 0\n    let token\n    for (let j = colon - 1; j >= 0; j--) {\n      token = tokens[j]\n      if (token[0] !== 'space') {\n        founded += 1\n        if (founded === 2) break\n      }\n    }\n    // If the token is a word, e.g. `!important`, `red` or any other valid property's value.\n    // Then we need to return the colon after that word token. [3] is the \"end\" colon of that word.\n    // And because we need it after that one we do +1 to get the next one.\n    throw this.input.error(\n      'Missed semicolon',\n      token[0] === 'word' ? token[3] + 1 : token[2]\n    )\n  }\n}\n\nmodule.exports = Parser\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/postcss/lib/parser.js?");

/***/ }),

/***/ "./node_modules/postcss/lib/postcss.js":
/*!*********************************************!*\
  !*** ./node_modules/postcss/lib/postcss.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nlet CssSyntaxError = __webpack_require__(/*! ./css-syntax-error */ \"./node_modules/postcss/lib/css-syntax-error.js\")\nlet Declaration = __webpack_require__(/*! ./declaration */ \"./node_modules/postcss/lib/declaration.js\")\nlet LazyResult = __webpack_require__(/*! ./lazy-result */ \"./node_modules/postcss/lib/lazy-result.js\")\nlet Container = __webpack_require__(/*! ./container */ \"./node_modules/postcss/lib/container.js\")\nlet Processor = __webpack_require__(/*! ./processor */ \"./node_modules/postcss/lib/processor.js\")\nlet stringify = __webpack_require__(/*! ./stringify */ \"./node_modules/postcss/lib/stringify.js\")\nlet fromJSON = __webpack_require__(/*! ./fromJSON */ \"./node_modules/postcss/lib/fromJSON.js\")\nlet Document = __webpack_require__(/*! ./document */ \"./node_modules/postcss/lib/document.js\")\nlet Warning = __webpack_require__(/*! ./warning */ \"./node_modules/postcss/lib/warning.js\")\nlet Comment = __webpack_require__(/*! ./comment */ \"./node_modules/postcss/lib/comment.js\")\nlet AtRule = __webpack_require__(/*! ./at-rule */ \"./node_modules/postcss/lib/at-rule.js\")\nlet Result = __webpack_require__(/*! ./result.js */ \"./node_modules/postcss/lib/result.js\")\nlet Input = __webpack_require__(/*! ./input */ \"./node_modules/postcss/lib/input.js\")\nlet parse = __webpack_require__(/*! ./parse */ \"./node_modules/postcss/lib/parse.js\")\nlet list = __webpack_require__(/*! ./list */ \"./node_modules/postcss/lib/list.js\")\nlet Rule = __webpack_require__(/*! ./rule */ \"./node_modules/postcss/lib/rule.js\")\nlet Root = __webpack_require__(/*! ./root */ \"./node_modules/postcss/lib/root.js\")\nlet Node = __webpack_require__(/*! ./node */ \"./node_modules/postcss/lib/node.js\")\n\nfunction postcss(...plugins) {\n  if (plugins.length === 1 && Array.isArray(plugins[0])) {\n    plugins = plugins[0]\n  }\n  return new Processor(plugins)\n}\n\npostcss.plugin = function plugin(name, initializer) {\n  let warningPrinted = false\n  function creator(...args) {\n    // eslint-disable-next-line no-console\n    if (console && console.warn && !warningPrinted) {\n      warningPrinted = true\n      // eslint-disable-next-line no-console\n      console.warn(\n        name +\n          ': postcss.plugin was deprecated. Migration guide:\\n' +\n          'https://evilmartians.com/chronicles/postcss-8-plugin-migration'\n      )\n      if (process.env.LANG && process.env.LANG.startsWith('cn')) {\n        /* c8 ignore next 7 */\n        // eslint-disable-next-line no-console\n        console.warn(\n          name +\n            ': 里面 postcss.plugin 被弃用. 迁移指南:\\n' +\n            'https://www.w3ctech.com/topic/2226'\n        )\n      }\n    }\n    let transformer = initializer(...args)\n    transformer.postcssPlugin = name\n    transformer.postcssVersion = new Processor().version\n    return transformer\n  }\n\n  let cache\n  Object.defineProperty(creator, 'postcss', {\n    get() {\n      if (!cache) cache = creator()\n      return cache\n    }\n  })\n\n  creator.process = function (css, processOpts, pluginOpts) {\n    return postcss([creator(pluginOpts)]).process(css, processOpts)\n  }\n\n  return creator\n}\n\npostcss.stringify = stringify\npostcss.parse = parse\npostcss.fromJSON = fromJSON\npostcss.list = list\n\npostcss.comment = defaults => new Comment(defaults)\npostcss.atRule = defaults => new AtRule(defaults)\npostcss.decl = defaults => new Declaration(defaults)\npostcss.rule = defaults => new Rule(defaults)\npostcss.root = defaults => new Root(defaults)\npostcss.document = defaults => new Document(defaults)\n\npostcss.CssSyntaxError = CssSyntaxError\npostcss.Declaration = Declaration\npostcss.Container = Container\npostcss.Processor = Processor\npostcss.Document = Document\npostcss.Comment = Comment\npostcss.Warning = Warning\npostcss.AtRule = AtRule\npostcss.Result = Result\npostcss.Input = Input\npostcss.Rule = Rule\npostcss.Root = Root\npostcss.Node = Node\n\nLazyResult.registerPostcss(postcss)\n\nmodule.exports = postcss\npostcss.default = postcss\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/postcss/lib/postcss.js?");

/***/ }),

/***/ "./node_modules/postcss/lib/previous-map.js":
/*!**************************************************!*\
  !*** ./node_modules/postcss/lib/previous-map.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nlet { SourceMapConsumer, SourceMapGenerator } = __webpack_require__(/*! source-map-js */ \"?b8cb\")\nlet { existsSync, readFileSync } = __webpack_require__(/*! fs */ \"?03fb\")\nlet { dirname, join } = __webpack_require__(/*! path */ \"?6197\")\n\nfunction fromBase64(str) {\n  if (Buffer) {\n    return Buffer.from(str, 'base64').toString()\n  } else {\n    /* c8 ignore next 2 */\n    return window.atob(str)\n  }\n}\n\nclass PreviousMap {\n  constructor(css, opts) {\n    if (opts.map === false) return\n    this.loadAnnotation(css)\n    this.inline = this.startWith(this.annotation, 'data:')\n\n    let prev = opts.map ? opts.map.prev : undefined\n    let text = this.loadMap(opts.from, prev)\n    if (!this.mapFile && opts.from) {\n      this.mapFile = opts.from\n    }\n    if (this.mapFile) this.root = dirname(this.mapFile)\n    if (text) this.text = text\n  }\n\n  consumer() {\n    if (!this.consumerCache) {\n      this.consumerCache = new SourceMapConsumer(this.text)\n    }\n    return this.consumerCache\n  }\n\n  withContent() {\n    return !!(\n      this.consumer().sourcesContent &&\n      this.consumer().sourcesContent.length > 0\n    )\n  }\n\n  startWith(string, start) {\n    if (!string) return false\n    return string.substr(0, start.length) === start\n  }\n\n  getAnnotationURL(sourceMapString) {\n    return sourceMapString.replace(/^\\/\\*\\s*# sourceMappingURL=/, '').trim()\n  }\n\n  loadAnnotation(css) {\n    let comments = css.match(/\\/\\*\\s*# sourceMappingURL=/gm)\n    if (!comments) return\n\n    // sourceMappingURLs from comments, strings, etc.\n    let start = css.lastIndexOf(comments.pop())\n    let end = css.indexOf('*/', start)\n\n    if (start > -1 && end > -1) {\n      // Locate the last sourceMappingURL to avoid pickin\n      this.annotation = this.getAnnotationURL(css.substring(start, end))\n    }\n  }\n\n  decodeInline(text) {\n    let baseCharsetUri = /^data:application\\/json;charset=utf-?8;base64,/\n    let baseUri = /^data:application\\/json;base64,/\n    let charsetUri = /^data:application\\/json;charset=utf-?8,/\n    let uri = /^data:application\\/json,/\n\n    if (charsetUri.test(text) || uri.test(text)) {\n      return decodeURIComponent(text.substr(RegExp.lastMatch.length))\n    }\n\n    if (baseCharsetUri.test(text) || baseUri.test(text)) {\n      return fromBase64(text.substr(RegExp.lastMatch.length))\n    }\n\n    let encoding = text.match(/data:application\\/json;([^,]+),/)[1]\n    throw new Error('Unsupported source map encoding ' + encoding)\n  }\n\n  loadFile(path) {\n    this.root = dirname(path)\n    if (existsSync(path)) {\n      this.mapFile = path\n      return readFileSync(path, 'utf-8').toString().trim()\n    }\n  }\n\n  loadMap(file, prev) {\n    if (prev === false) return false\n\n    if (prev) {\n      if (typeof prev === 'string') {\n        return prev\n      } else if (typeof prev === 'function') {\n        let prevPath = prev(file)\n        if (prevPath) {\n          let map = this.loadFile(prevPath)\n          if (!map) {\n            throw new Error(\n              'Unable to load previous source map: ' + prevPath.toString()\n            )\n          }\n          return map\n        }\n      } else if (prev instanceof SourceMapConsumer) {\n        return SourceMapGenerator.fromSourceMap(prev).toString()\n      } else if (prev instanceof SourceMapGenerator) {\n        return prev.toString()\n      } else if (this.isMap(prev)) {\n        return JSON.stringify(prev)\n      } else {\n        throw new Error(\n          'Unsupported previous source map format: ' + prev.toString()\n        )\n      }\n    } else if (this.inline) {\n      return this.decodeInline(this.annotation)\n    } else if (this.annotation) {\n      let map = this.annotation\n      if (file) map = join(dirname(file), map)\n      return this.loadFile(map)\n    }\n  }\n\n  isMap(map) {\n    if (typeof map !== 'object') return false\n    return (\n      typeof map.mappings === 'string' ||\n      typeof map._mappings === 'string' ||\n      Array.isArray(map.sections)\n    )\n  }\n}\n\nmodule.exports = PreviousMap\nPreviousMap.default = PreviousMap\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/postcss/lib/previous-map.js?");

/***/ }),

/***/ "./node_modules/postcss/lib/processor.js":
/*!***********************************************!*\
  !*** ./node_modules/postcss/lib/processor.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nlet NoWorkResult = __webpack_require__(/*! ./no-work-result */ \"./node_modules/postcss/lib/no-work-result.js\")\nlet LazyResult = __webpack_require__(/*! ./lazy-result */ \"./node_modules/postcss/lib/lazy-result.js\")\nlet Document = __webpack_require__(/*! ./document */ \"./node_modules/postcss/lib/document.js\")\nlet Root = __webpack_require__(/*! ./root */ \"./node_modules/postcss/lib/root.js\")\n\nclass Processor {\n  constructor(plugins = []) {\n    this.version = '8.4.18'\n    this.plugins = this.normalize(plugins)\n  }\n\n  use(plugin) {\n    this.plugins = this.plugins.concat(this.normalize([plugin]))\n    return this\n  }\n\n  process(css, opts = {}) {\n    if (\n      this.plugins.length === 0 &&\n      typeof opts.parser === 'undefined' &&\n      typeof opts.stringifier === 'undefined' &&\n      typeof opts.syntax === 'undefined'\n    ) {\n      return new NoWorkResult(this, css, opts)\n    } else {\n      return new LazyResult(this, css, opts)\n    }\n  }\n\n  normalize(plugins) {\n    let normalized = []\n    for (let i of plugins) {\n      if (i.postcss === true) {\n        i = i()\n      } else if (i.postcss) {\n        i = i.postcss\n      }\n\n      if (typeof i === 'object' && Array.isArray(i.plugins)) {\n        normalized = normalized.concat(i.plugins)\n      } else if (typeof i === 'object' && i.postcssPlugin) {\n        normalized.push(i)\n      } else if (typeof i === 'function') {\n        normalized.push(i)\n      } else if (typeof i === 'object' && (i.parse || i.stringify)) {\n        if (true) {\n          throw new Error(\n            'PostCSS syntaxes cannot be used as plugins. Instead, please use ' +\n              'one of the syntax/parser/stringifier options as outlined ' +\n              'in your PostCSS runner documentation.'\n          )\n        }\n      } else {\n        throw new Error(i + ' is not a PostCSS plugin')\n      }\n    }\n    return normalized\n  }\n}\n\nmodule.exports = Processor\nProcessor.default = Processor\n\nRoot.registerProcessor(Processor)\nDocument.registerProcessor(Processor)\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/postcss/lib/processor.js?");

/***/ }),

/***/ "./node_modules/postcss/lib/result.js":
/*!********************************************!*\
  !*** ./node_modules/postcss/lib/result.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nlet Warning = __webpack_require__(/*! ./warning */ \"./node_modules/postcss/lib/warning.js\")\n\nclass Result {\n  constructor(processor, root, opts) {\n    this.processor = processor\n    this.messages = []\n    this.root = root\n    this.opts = opts\n    this.css = undefined\n    this.map = undefined\n  }\n\n  toString() {\n    return this.css\n  }\n\n  warn(text, opts = {}) {\n    if (!opts.plugin) {\n      if (this.lastPlugin && this.lastPlugin.postcssPlugin) {\n        opts.plugin = this.lastPlugin.postcssPlugin\n      }\n    }\n\n    let warning = new Warning(text, opts)\n    this.messages.push(warning)\n\n    return warning\n  }\n\n  warnings() {\n    return this.messages.filter(i => i.type === 'warning')\n  }\n\n  get content() {\n    return this.css\n  }\n}\n\nmodule.exports = Result\nResult.default = Result\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/postcss/lib/result.js?");

/***/ }),

/***/ "./node_modules/postcss/lib/root.js":
/*!******************************************!*\
  !*** ./node_modules/postcss/lib/root.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nlet Container = __webpack_require__(/*! ./container */ \"./node_modules/postcss/lib/container.js\")\n\nlet LazyResult, Processor\n\nclass Root extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'root'\n    if (!this.nodes) this.nodes = []\n  }\n\n  removeChild(child, ignore) {\n    let index = this.index(child)\n\n    if (!ignore && index === 0 && this.nodes.length > 1) {\n      this.nodes[1].raws.before = this.nodes[index].raws.before\n    }\n\n    return super.removeChild(child)\n  }\n\n  normalize(child, sample, type) {\n    let nodes = super.normalize(child)\n\n    if (sample) {\n      if (type === 'prepend') {\n        if (this.nodes.length > 1) {\n          sample.raws.before = this.nodes[1].raws.before\n        } else {\n          delete sample.raws.before\n        }\n      } else if (this.first !== sample) {\n        for (let node of nodes) {\n          node.raws.before = sample.raws.before\n        }\n      }\n    }\n\n    return nodes\n  }\n\n  toResult(opts = {}) {\n    let lazy = new LazyResult(new Processor(), this, opts)\n    return lazy.stringify()\n  }\n}\n\nRoot.registerLazyResult = dependant => {\n  LazyResult = dependant\n}\n\nRoot.registerProcessor = dependant => {\n  Processor = dependant\n}\n\nmodule.exports = Root\nRoot.default = Root\n\nContainer.registerRoot(Root)\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/postcss/lib/root.js?");

/***/ }),

/***/ "./node_modules/postcss/lib/rule.js":
/*!******************************************!*\
  !*** ./node_modules/postcss/lib/rule.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nlet Container = __webpack_require__(/*! ./container */ \"./node_modules/postcss/lib/container.js\")\nlet list = __webpack_require__(/*! ./list */ \"./node_modules/postcss/lib/list.js\")\n\nclass Rule extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'rule'\n    if (!this.nodes) this.nodes = []\n  }\n\n  get selectors() {\n    return list.comma(this.selector)\n  }\n\n  set selectors(values) {\n    let match = this.selector ? this.selector.match(/,\\s*/) : null\n    let sep = match ? match[0] : ',' + this.raw('between', 'beforeOpen')\n    this.selector = values.join(sep)\n  }\n}\n\nmodule.exports = Rule\nRule.default = Rule\n\nContainer.registerRule(Rule)\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/postcss/lib/rule.js?");

/***/ }),

/***/ "./node_modules/postcss/lib/stringifier.js":
/*!*************************************************!*\
  !*** ./node_modules/postcss/lib/stringifier.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nconst DEFAULT_RAW = {\n  colon: ': ',\n  indent: '    ',\n  beforeDecl: '\\n',\n  beforeRule: '\\n',\n  beforeOpen: ' ',\n  beforeClose: '\\n',\n  beforeComment: '\\n',\n  after: '\\n',\n  emptyBody: '',\n  commentLeft: ' ',\n  commentRight: ' ',\n  semicolon: false\n}\n\nfunction capitalize(str) {\n  return str[0].toUpperCase() + str.slice(1)\n}\n\nclass Stringifier {\n  constructor(builder) {\n    this.builder = builder\n  }\n\n  stringify(node, semicolon) {\n    /* c8 ignore start */\n    if (!this[node.type]) {\n      throw new Error(\n        'Unknown AST node type ' +\n          node.type +\n          '. ' +\n          'Maybe you need to change PostCSS stringifier.'\n      )\n    }\n    /* c8 ignore stop */\n    this[node.type](node, semicolon)\n  }\n\n  document(node) {\n    this.body(node)\n  }\n\n  root(node) {\n    this.body(node)\n    if (node.raws.after) this.builder(node.raws.after)\n  }\n\n  comment(node) {\n    let left = this.raw(node, 'left', 'commentLeft')\n    let right = this.raw(node, 'right', 'commentRight')\n    this.builder('/*' + left + node.text + right + '*/', node)\n  }\n\n  decl(node, semicolon) {\n    let between = this.raw(node, 'between', 'colon')\n    let string = node.prop + between + this.rawValue(node, 'value')\n\n    if (node.important) {\n      string += node.raws.important || ' !important'\n    }\n\n    if (semicolon) string += ';'\n    this.builder(string, node)\n  }\n\n  rule(node) {\n    this.block(node, this.rawValue(node, 'selector'))\n    if (node.raws.ownSemicolon) {\n      this.builder(node.raws.ownSemicolon, node, 'end')\n    }\n  }\n\n  atrule(node, semicolon) {\n    let name = '@' + node.name\n    let params = node.params ? this.rawValue(node, 'params') : ''\n\n    if (typeof node.raws.afterName !== 'undefined') {\n      name += node.raws.afterName\n    } else if (params) {\n      name += ' '\n    }\n\n    if (node.nodes) {\n      this.block(node, name + params)\n    } else {\n      let end = (node.raws.between || '') + (semicolon ? ';' : '')\n      this.builder(name + params + end, node)\n    }\n  }\n\n  body(node) {\n    let last = node.nodes.length - 1\n    while (last > 0) {\n      if (node.nodes[last].type !== 'comment') break\n      last -= 1\n    }\n\n    let semicolon = this.raw(node, 'semicolon')\n    for (let i = 0; i < node.nodes.length; i++) {\n      let child = node.nodes[i]\n      let before = this.raw(child, 'before')\n      if (before) this.builder(before)\n      this.stringify(child, last !== i || semicolon)\n    }\n  }\n\n  block(node, start) {\n    let between = this.raw(node, 'between', 'beforeOpen')\n    this.builder(start + between + '{', node, 'start')\n\n    let after\n    if (node.nodes && node.nodes.length) {\n      this.body(node)\n      after = this.raw(node, 'after')\n    } else {\n      after = this.raw(node, 'after', 'emptyBody')\n    }\n\n    if (after) this.builder(after)\n    this.builder('}', node, 'end')\n  }\n\n  raw(node, own, detect) {\n    let value\n    if (!detect) detect = own\n\n    // Already had\n    if (own) {\n      value = node.raws[own]\n      if (typeof value !== 'undefined') return value\n    }\n\n    let parent = node.parent\n\n    if (detect === 'before') {\n      // Hack for first rule in CSS\n      if (!parent || (parent.type === 'root' && parent.first === node)) {\n        return ''\n      }\n\n      // `root` nodes in `document` should use only their own raws\n      if (parent && parent.type === 'document') {\n        return ''\n      }\n    }\n\n    // Floating child without parent\n    if (!parent) return DEFAULT_RAW[detect]\n\n    // Detect style by other nodes\n    let root = node.root()\n    if (!root.rawCache) root.rawCache = {}\n    if (typeof root.rawCache[detect] !== 'undefined') {\n      return root.rawCache[detect]\n    }\n\n    if (detect === 'before' || detect === 'after') {\n      return this.beforeAfter(node, detect)\n    } else {\n      let method = 'raw' + capitalize(detect)\n      if (this[method]) {\n        value = this[method](root, node)\n      } else {\n        root.walk(i => {\n          value = i.raws[own]\n          if (typeof value !== 'undefined') return false\n        })\n      }\n    }\n\n    if (typeof value === 'undefined') value = DEFAULT_RAW[detect]\n\n    root.rawCache[detect] = value\n    return value\n  }\n\n  rawSemicolon(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length && i.last.type === 'decl') {\n        value = i.raws.semicolon\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawEmptyBody(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length === 0) {\n        value = i.raws.after\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawIndent(root) {\n    if (root.raws.indent) return root.raws.indent\n    let value\n    root.walk(i => {\n      let p = i.parent\n      if (p && p !== root && p.parent && p.parent === root) {\n        if (typeof i.raws.before !== 'undefined') {\n          let parts = i.raws.before.split('\\n')\n          value = parts[parts.length - 1]\n          value = value.replace(/\\S/g, '')\n          return false\n        }\n      }\n    })\n    return value\n  }\n\n  rawBeforeComment(root, node) {\n    let value\n    root.walkComments(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeDecl(root, node) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeRule')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeRule(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && (i.parent !== root || root.first !== i)) {\n        if (typeof i.raws.before !== 'undefined') {\n          value = i.raws.before\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawBeforeClose(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length > 0) {\n        if (typeof i.raws.after !== 'undefined') {\n          value = i.raws.after\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawBeforeOpen(root) {\n    let value\n    root.walk(i => {\n      if (i.type !== 'decl') {\n        value = i.raws.between\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawColon(root) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.between !== 'undefined') {\n        value = i.raws.between.replace(/[^\\s:]/g, '')\n        return false\n      }\n    })\n    return value\n  }\n\n  beforeAfter(node, detect) {\n    let value\n    if (node.type === 'decl') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (node.type === 'comment') {\n      value = this.raw(node, null, 'beforeComment')\n    } else if (detect === 'before') {\n      value = this.raw(node, null, 'beforeRule')\n    } else {\n      value = this.raw(node, null, 'beforeClose')\n    }\n\n    let buf = node.parent\n    let depth = 0\n    while (buf && buf.type !== 'root') {\n      depth += 1\n      buf = buf.parent\n    }\n\n    if (value.includes('\\n')) {\n      let indent = this.raw(node, null, 'indent')\n      if (indent.length) {\n        for (let step = 0; step < depth; step++) value += indent\n      }\n    }\n\n    return value\n  }\n\n  rawValue(node, prop) {\n    let value = node[prop]\n    let raw = node.raws[prop]\n    if (raw && raw.value === value) {\n      return raw.raw\n    }\n\n    return value\n  }\n}\n\nmodule.exports = Stringifier\nStringifier.default = Stringifier\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/postcss/lib/stringifier.js?");

/***/ }),

/***/ "./node_modules/postcss/lib/stringify.js":
/*!***********************************************!*\
  !*** ./node_modules/postcss/lib/stringify.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nlet Stringifier = __webpack_require__(/*! ./stringifier */ \"./node_modules/postcss/lib/stringifier.js\")\n\nfunction stringify(node, builder) {\n  let str = new Stringifier(builder)\n  str.stringify(node)\n}\n\nmodule.exports = stringify\nstringify.default = stringify\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/postcss/lib/stringify.js?");

/***/ }),

/***/ "./node_modules/postcss/lib/symbols.js":
/*!*********************************************!*\
  !*** ./node_modules/postcss/lib/symbols.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports.isClean = Symbol('isClean')\n\nmodule.exports.my = Symbol('my')\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/postcss/lib/symbols.js?");

/***/ }),

/***/ "./node_modules/postcss/lib/tokenize.js":
/*!**********************************************!*\
  !*** ./node_modules/postcss/lib/tokenize.js ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
eval("\n\nconst SINGLE_QUOTE = \"'\".charCodeAt(0)\nconst DOUBLE_QUOTE = '\"'.charCodeAt(0)\nconst BACKSLASH = '\\\\'.charCodeAt(0)\nconst SLASH = '/'.charCodeAt(0)\nconst NEWLINE = '\\n'.charCodeAt(0)\nconst SPACE = ' '.charCodeAt(0)\nconst FEED = '\\f'.charCodeAt(0)\nconst TAB = '\\t'.charCodeAt(0)\nconst CR = '\\r'.charCodeAt(0)\nconst OPEN_SQUARE = '['.charCodeAt(0)\nconst CLOSE_SQUARE = ']'.charCodeAt(0)\nconst OPEN_PARENTHESES = '('.charCodeAt(0)\nconst CLOSE_PARENTHESES = ')'.charCodeAt(0)\nconst OPEN_CURLY = '{'.charCodeAt(0)\nconst CLOSE_CURLY = '}'.charCodeAt(0)\nconst SEMICOLON = ';'.charCodeAt(0)\nconst ASTERISK = '*'.charCodeAt(0)\nconst COLON = ':'.charCodeAt(0)\nconst AT = '@'.charCodeAt(0)\n\nconst RE_AT_END = /[\\t\\n\\f\\r \"#'()/;[\\\\\\]{}]/g\nconst RE_WORD_END = /[\\t\\n\\f\\r !\"#'():;@[\\\\\\]{}]|\\/(?=\\*)/g\nconst RE_BAD_BRACKET = /.[\\n\"'(/\\\\]/\nconst RE_HEX_ESCAPE = /[\\da-f]/i\n\nmodule.exports = function tokenizer(input, options = {}) {\n  let css = input.css.valueOf()\n  let ignore = options.ignoreErrors\n\n  let code, next, quote, content, escape\n  let escaped, escapePos, prev, n, currentToken\n\n  let length = css.length\n  let pos = 0\n  let buffer = []\n  let returned = []\n\n  function position() {\n    return pos\n  }\n\n  function unclosed(what) {\n    throw input.error('Unclosed ' + what, pos)\n  }\n\n  function endOfFile() {\n    return returned.length === 0 && pos >= length\n  }\n\n  function nextToken(opts) {\n    if (returned.length) return returned.pop()\n    if (pos >= length) return\n\n    let ignoreUnclosed = opts ? opts.ignoreUnclosed : false\n\n    code = css.charCodeAt(pos)\n\n    switch (code) {\n      case NEWLINE:\n      case SPACE:\n      case TAB:\n      case CR:\n      case FEED: {\n        next = pos\n        do {\n          next += 1\n          code = css.charCodeAt(next)\n        } while (\n          code === SPACE ||\n          code === NEWLINE ||\n          code === TAB ||\n          code === CR ||\n          code === FEED\n        )\n\n        currentToken = ['space', css.slice(pos, next)]\n        pos = next - 1\n        break\n      }\n\n      case OPEN_SQUARE:\n      case CLOSE_SQUARE:\n      case OPEN_CURLY:\n      case CLOSE_CURLY:\n      case COLON:\n      case SEMICOLON:\n      case CLOSE_PARENTHESES: {\n        let controlChar = String.fromCharCode(code)\n        currentToken = [controlChar, controlChar, pos]\n        break\n      }\n\n      case OPEN_PARENTHESES: {\n        prev = buffer.length ? buffer.pop()[1] : ''\n        n = css.charCodeAt(pos + 1)\n        if (\n          prev === 'url' &&\n          n !== SINGLE_QUOTE &&\n          n !== DOUBLE_QUOTE &&\n          n !== SPACE &&\n          n !== NEWLINE &&\n          n !== TAB &&\n          n !== FEED &&\n          n !== CR\n        ) {\n          next = pos\n          do {\n            escaped = false\n            next = css.indexOf(')', next + 1)\n            if (next === -1) {\n              if (ignore || ignoreUnclosed) {\n                next = pos\n                break\n              } else {\n                unclosed('bracket')\n              }\n            }\n            escapePos = next\n            while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n              escapePos -= 1\n              escaped = !escaped\n            }\n          } while (escaped)\n\n          currentToken = ['brackets', css.slice(pos, next + 1), pos, next]\n\n          pos = next\n        } else {\n          next = css.indexOf(')', pos + 1)\n          content = css.slice(pos, next + 1)\n\n          if (next === -1 || RE_BAD_BRACKET.test(content)) {\n            currentToken = ['(', '(', pos]\n          } else {\n            currentToken = ['brackets', content, pos, next]\n            pos = next\n          }\n        }\n\n        break\n      }\n\n      case SINGLE_QUOTE:\n      case DOUBLE_QUOTE: {\n        quote = code === SINGLE_QUOTE ? \"'\" : '\"'\n        next = pos\n        do {\n          escaped = false\n          next = css.indexOf(quote, next + 1)\n          if (next === -1) {\n            if (ignore || ignoreUnclosed) {\n              next = pos + 1\n              break\n            } else {\n              unclosed('string')\n            }\n          }\n          escapePos = next\n          while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n            escapePos -= 1\n            escaped = !escaped\n          }\n        } while (escaped)\n\n        currentToken = ['string', css.slice(pos, next + 1), pos, next]\n        pos = next\n        break\n      }\n\n      case AT: {\n        RE_AT_END.lastIndex = pos + 1\n        RE_AT_END.test(css)\n        if (RE_AT_END.lastIndex === 0) {\n          next = css.length - 1\n        } else {\n          next = RE_AT_END.lastIndex - 2\n        }\n\n        currentToken = ['at-word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      case BACKSLASH: {\n        next = pos\n        escape = true\n        while (css.charCodeAt(next + 1) === BACKSLASH) {\n          next += 1\n          escape = !escape\n        }\n        code = css.charCodeAt(next + 1)\n        if (\n          escape &&\n          code !== SLASH &&\n          code !== SPACE &&\n          code !== NEWLINE &&\n          code !== TAB &&\n          code !== CR &&\n          code !== FEED\n        ) {\n          next += 1\n          if (RE_HEX_ESCAPE.test(css.charAt(next))) {\n            while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {\n              next += 1\n            }\n            if (css.charCodeAt(next + 1) === SPACE) {\n              next += 1\n            }\n          }\n        }\n\n        currentToken = ['word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      default: {\n        if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {\n          next = css.indexOf('*/', pos + 2) + 1\n          if (next === 0) {\n            if (ignore || ignoreUnclosed) {\n              next = css.length\n            } else {\n              unclosed('comment')\n            }\n          }\n\n          currentToken = ['comment', css.slice(pos, next + 1), pos, next]\n          pos = next\n        } else {\n          RE_WORD_END.lastIndex = pos + 1\n          RE_WORD_END.test(css)\n          if (RE_WORD_END.lastIndex === 0) {\n            next = css.length - 1\n          } else {\n            next = RE_WORD_END.lastIndex - 2\n          }\n\n          currentToken = ['word', css.slice(pos, next + 1), pos, next]\n          buffer.push(currentToken)\n          pos = next\n        }\n\n        break\n      }\n    }\n\n    pos++\n    return currentToken\n  }\n\n  function back(token) {\n    returned.push(token)\n  }\n\n  return {\n    back,\n    nextToken,\n    endOfFile,\n    position\n  }\n}\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/postcss/lib/tokenize.js?");

/***/ }),

/***/ "./node_modules/postcss/lib/warn-once.js":
/*!***********************************************!*\
  !*** ./node_modules/postcss/lib/warn-once.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
eval("/* eslint-disable no-console */\n\n\nlet printed = {}\n\nmodule.exports = function warnOnce(message) {\n  if (printed[message]) return\n  printed[message] = true\n\n  if (typeof console !== 'undefined' && console.warn) {\n    console.warn(message)\n  }\n}\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/postcss/lib/warn-once.js?");

/***/ }),

/***/ "./node_modules/postcss/lib/warning.js":
/*!*********************************************!*\
  !*** ./node_modules/postcss/lib/warning.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
eval("\n\nclass Warning {\n  constructor(text, opts = {}) {\n    this.type = 'warning'\n    this.text = text\n\n    if (opts.node && opts.node.source) {\n      let range = opts.node.rangeBy(opts)\n      this.line = range.start.line\n      this.column = range.start.column\n      this.endLine = range.end.line\n      this.endColumn = range.end.column\n    }\n\n    for (let opt in opts) this[opt] = opts[opt]\n  }\n\n  toString() {\n    if (this.node) {\n      return this.node.error(this.text, {\n        plugin: this.plugin,\n        index: this.index,\n        word: this.word\n      }).message\n    }\n\n    if (this.plugin) {\n      return this.plugin + ': ' + this.text\n    }\n\n    return this.text\n  }\n}\n\nmodule.exports = Warning\nWarning.default = Warning\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/postcss/lib/warning.js?");

/***/ }),

/***/ "?5580":
/*!**************************************!*\
  !*** ./terminal-highlight (ignored) ***!
  \**************************************/
/***/ (() => {

eval("/* (ignored) */\n\n//# sourceURL=webpack://dom-to-svg/./terminal-highlight_(ignored)?");

/***/ }),

/***/ "?03fb":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (() => {

eval("/* (ignored) */\n\n//# sourceURL=webpack://dom-to-svg/fs_(ignored)?");

/***/ }),

/***/ "?6197":
/*!**********************!*\
  !*** path (ignored) ***!
  \**********************/
/***/ (() => {

eval("/* (ignored) */\n\n//# sourceURL=webpack://dom-to-svg/path_(ignored)?");

/***/ }),

/***/ "?b8cb":
/*!*******************************!*\
  !*** source-map-js (ignored) ***!
  \*******************************/
/***/ (() => {

eval("/* (ignored) */\n\n//# sourceURL=webpack://dom-to-svg/source-map-js_(ignored)?");

/***/ }),

/***/ "?c717":
/*!*********************!*\
  !*** url (ignored) ***!
  \*********************/
/***/ (() => {

eval("/* (ignored) */\n\n//# sourceURL=webpack://dom-to-svg/url_(ignored)?");

/***/ }),

/***/ "./node_modules/nanoid/non-secure/index.cjs":
/*!**************************************************!*\
  !*** ./node_modules/nanoid/non-secure/index.cjs ***!
  \**************************************************/
/***/ ((module) => {

eval("let urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\nlet customAlphabet = (alphabet, defaultSize = 21) => {\n  return (size = defaultSize) => {\n    let id = ''\n    let i = size\n    while (i--) {\n      id += alphabet[(Math.random() * alphabet.length) | 0]\n    }\n    return id\n  }\n}\nlet nanoid = (size = 21) => {\n  let id = ''\n  let i = size\n  while (i--) {\n    id += urlAlphabet[(Math.random() * 64) | 0]\n  }\n  return id\n}\nmodule.exports = { nanoid, customAlphabet }\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/nanoid/non-secure/index.cjs?");

/***/ }),

/***/ "./node_modules/dom-to-svg/lib/accessibility.js":
/*!******************************************************!*\
  !*** ./node_modules/dom-to-svg/lib/accessibility.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getAccessibilityAttributes\": () => (/* binding */ getAccessibilityAttributes)\n/* harmony export */ });\n/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom.js */ \"./node_modules/dom-to-svg/lib/dom.js\");\n\nconst isStandaloneFooter = (element) => !element.closest('article, aside, main, nav, section, [role=\"article\"], [role=\"complementary\"], [role=\"main\"], [role=\"navigation\"], [role=\"region\"]');\nfunction getAccessibilityAttributes(element, { labels, getUniqueId }) {\n    var _a, _b, _c;\n    // https://www.w3.org/TR/html-aria/\n    const attributes = new Map();\n    switch (element.tagName) {\n        case 'A':\n            attributes.set('role', 'link');\n            break;\n        case 'ARTICLE':\n            attributes.set('role', 'article');\n            break;\n        case 'ASIDE':\n            attributes.set('role', 'complementary');\n            break;\n        case 'BODY':\n            attributes.set('role', 'document');\n            break;\n        case 'BUTTON':\n        case 'SUMMARY':\n            attributes.set('role', 'button');\n            break;\n        case 'DD':\n            attributes.set('role', 'definition');\n            break;\n        case 'DETAILS':\n            attributes.set('role', 'group');\n            break;\n        case 'DFN':\n            attributes.set('role', 'term');\n            break;\n        case 'DIALOG':\n            attributes.set('role', 'dialog');\n            break;\n        case 'DT':\n            attributes.set('role', 'term');\n            break;\n        case 'FIELDSET':\n            attributes.set('role', 'group');\n            break;\n        case 'FIGURE':\n            attributes.set('role', 'figure');\n            break;\n        case 'FOOTER':\n            if (isStandaloneFooter(element)) {\n                attributes.set('role', 'contentinfo');\n            }\n            break;\n        case 'FORM':\n            attributes.set('role', 'form');\n            break;\n        case 'H1':\n        case 'H2':\n        case 'H3':\n        case 'H4':\n        case 'H5':\n        case 'H6':\n            attributes.set('role', 'heading');\n            attributes.set('aria-level', element.tagName.slice(1));\n            break;\n        case 'HEADER':\n            if (isStandaloneFooter(element)) {\n                attributes.set('role', 'banner');\n            }\n            break;\n        case 'HR':\n            attributes.set('role', 'separator');\n            break;\n        case 'IMG': {\n            const alt = element.getAttribute('alt');\n            if (alt === null || alt !== '') {\n                attributes.set('role', 'img');\n                if (alt) {\n                    attributes.set('aria-label', alt);\n                }\n            }\n            break;\n        }\n        case 'INPUT':\n            switch (element.type) {\n                case 'button':\n                case 'image':\n                case 'reset':\n                case 'submit':\n                    attributes.set('role', 'button');\n                    break;\n                case 'number':\n                    attributes.set('role', 'spinbutton');\n                    break;\n                case 'range':\n                    attributes.set('role', 'slider');\n                    break;\n                case 'checkbox':\n                    attributes.set('role', 'checkbox');\n                    break;\n                case 'radio':\n                    attributes.set('role', 'radio');\n                    break;\n                case 'email':\n                case 'tel':\n                    if (!element.hasAttribute('list')) {\n                        attributes.set('role', 'textbox');\n                    }\n                    break;\n            }\n            break;\n        case 'LI':\n            if (((_a = element.parentElement) === null || _a === void 0 ? void 0 : _a.tagName) === 'OL' ||\n                ((_b = element.parentElement) === null || _b === void 0 ? void 0 : _b.tagName) === 'UL' ||\n                ((_c = element.parentElement) === null || _c === void 0 ? void 0 : _c.tagName) === 'MENU') {\n                attributes.set('role', 'listitem');\n            }\n            break;\n        case 'LINK':\n            if (element.href) {\n                attributes.set('role', 'link');\n            }\n            break;\n        case 'MAIN':\n            attributes.set('role', 'main');\n            break;\n        case 'MATH':\n            attributes.set('role', 'math');\n            break;\n        case 'OL':\n        case 'UL':\n        case 'MENU':\n            attributes.set('role', 'list');\n            break;\n        case 'NAV':\n            attributes.set('role', 'navigation');\n            break;\n        case 'OPTION':\n            attributes.set('role', 'option');\n            break;\n        case 'PROGRESS':\n            attributes.set('role', 'progressbar');\n            break;\n        case 'SECTION':\n            attributes.set('role', 'region');\n            break;\n        case 'SELECT':\n            attributes.set('role', !element.hasAttribute('multiple') && element.size <= 1 ? 'combobox' : 'listbox');\n            break;\n        case 'TABLE':\n            attributes.set('role', 'table');\n            break;\n        case 'THEAD':\n        case 'TBODY':\n        case 'TFOOT':\n            attributes.set('role', 'rowgroup');\n            break;\n        case 'TEXTAREA':\n            attributes.set('role', 'textbox');\n            break;\n        case 'TD':\n            attributes.set('role', 'cell');\n            break;\n        case 'TH':\n            attributes.set('role', element.closest('thead') ? 'columnheader' : 'rowheader');\n            break;\n        case 'TR':\n            attributes.set('role', 'tablerow');\n            break;\n    }\n    if (element.hasAttribute('disabled')) {\n        attributes.set('aria-disabled', 'true');\n    }\n    if (element.hasAttribute('placeholder')) {\n        attributes.set('aria-placeholder', element.getAttribute('placeholder') || '');\n    }\n    const tabIndex = element.getAttribute('tabindex');\n    if (tabIndex) {\n        attributes.set('tabindex', tabIndex);\n    }\n    if ((0,_dom_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element) && (0,_dom_js__WEBPACK_IMPORTED_MODULE_0__.hasLabels)(element) && element.labels) {\n        // Need to invert the label[for] / [aria-labelledby] relationship\n        attributes.set('aria-labelledby', [...element.labels]\n            .map(label => {\n            let labelId = label.id || labels.get(label);\n            if (!labelId) {\n                labelId = getUniqueId('label');\n                labels.set(label, labelId);\n            }\n            return labelId;\n        })\n            .join(' '));\n    }\n    for (const attribute of element.attributes) {\n        if (attribute.name.startsWith('aria-')) {\n            attributes.set(attribute.name, attribute.value);\n        }\n    }\n    const customRole = element.getAttribute('role');\n    if (customRole) {\n        attributes.set('role', customRole);\n    }\n    return attributes;\n}\n//# sourceMappingURL=accessibility.js.map\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/dom-to-svg/lib/accessibility.js?");

/***/ }),

/***/ "./node_modules/dom-to-svg/lib/css.js":
/*!********************************************!*\
  !*** ./node_modules/dom-to-svg/lib/css.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"calculateOverlappingCurvesFactor\": () => (/* binding */ calculateOverlappingCurvesFactor),\n/* harmony export */   \"copyCssStyles\": () => (/* binding */ copyCssStyles),\n/* harmony export */   \"getBorderRadiiForSide\": () => (/* binding */ getBorderRadiiForSide),\n/* harmony export */   \"hasUniformBorder\": () => (/* binding */ hasUniformBorder),\n/* harmony export */   \"isCSSFontFaceRule\": () => (/* binding */ isCSSFontFaceRule),\n/* harmony export */   \"isHorizontal\": () => (/* binding */ isHorizontal),\n/* harmony export */   \"isInFlow\": () => (/* binding */ isInFlow),\n/* harmony export */   \"isInline\": () => (/* binding */ isInline),\n/* harmony export */   \"isPositioned\": () => (/* binding */ isPositioned),\n/* harmony export */   \"isTransparent\": () => (/* binding */ isTransparent),\n/* harmony export */   \"isVisible\": () => (/* binding */ isVisible),\n/* harmony export */   \"parseCSSLength\": () => (/* binding */ parseCSSLength),\n/* harmony export */   \"unescapeStringValue\": () => (/* binding */ unescapeStringValue)\n/* harmony export */ });\nconst isCSSFontFaceRule = (rule) => rule.type === CSSRule.FONT_FACE_RULE;\nconst isInline = (styles) => styles.displayOutside === 'inline' || styles.display.startsWith('inline-');\nconst isPositioned = (styles) => styles.position !== 'static';\nconst isInFlow = (styles) => styles.float !== 'none' && styles.position !== 'absolute' && styles.position !== 'fixed';\nconst isTransparent = (color) => color === 'transparent' || color === 'rgba(0, 0, 0, 0)';\nconst hasUniformBorder = (styles) => parseFloat(styles.borderTopWidth) !== 0 &&\n    styles.borderTopStyle !== 'none' &&\n    styles.borderTopStyle !== 'inset' &&\n    styles.borderTopStyle !== 'outset' &&\n    !isTransparent(styles.borderTopColor) &&\n    // Cannot use border property directly as in Firefox those are empty strings.\n    // Need to get the specific border properties from the specific sides.\n    // https://stackoverflow.com/questions/41696063/getcomputedstyle-returns-empty-strings-on-ff-when-instead-crome-returns-a-comp\n    styles.borderTopWidth === styles.borderLeftWidth &&\n    styles.borderTopWidth === styles.borderRightWidth &&\n    styles.borderTopWidth === styles.borderBottomWidth &&\n    styles.borderTopColor === styles.borderLeftColor &&\n    styles.borderTopColor === styles.borderRightColor &&\n    styles.borderTopColor === styles.borderBottomColor &&\n    styles.borderTopStyle === styles.borderLeftStyle &&\n    styles.borderTopStyle === styles.borderRightStyle &&\n    styles.borderTopStyle === styles.borderBottomStyle;\n/** The 4 sides of a box. */\nconst SIDES = ['top', 'bottom', 'right', 'left'];\n/** Whether the given side is a horizontal side. */\nconst isHorizontal = (side) => side === 'bottom' || side === 'top';\n/**\n * The two corners for each side, in order of lower coordinate to higher coordinate.\n */\nconst CORNERS = {\n    top: ['left', 'right'],\n    bottom: ['left', 'right'],\n    left: ['top', 'bottom'],\n    right: ['top', 'bottom'],\n};\n/**\n * Returns the (elliptic) border radii for a given side.\n * For example, for the top side it will return the horizontal top-left and the horizontal top-right border radii.\n */\nfunction getBorderRadiiForSide(side, styles, bounds) {\n    var _a, _b, _c, _d;\n    const [horizontalStyle1, verticalStyle1] = styles\n        .getPropertyValue(isHorizontal(side)\n        ? `border-${side}-${CORNERS[side][0]}-radius`\n        : `border-${CORNERS[side][0]}-${side}-radius`)\n        .split(' ');\n    const [horizontalStyle2, verticalStyle2] = styles\n        .getPropertyValue(isHorizontal(side)\n        ? `border-${side}-${CORNERS[side][1]}-radius`\n        : `border-${CORNERS[side][1]}-${side}-radius`)\n        .split(' ');\n    if (isHorizontal(side)) {\n        return [\n            (_a = parseCSSLength(horizontalStyle1 || '0px', bounds.width)) !== null && _a !== void 0 ? _a : 0,\n            (_b = parseCSSLength(horizontalStyle2 || '0px', bounds.width)) !== null && _b !== void 0 ? _b : 0,\n        ];\n    }\n    return [\n        (_c = parseCSSLength(verticalStyle1 || horizontalStyle1 || '0px', bounds.height)) !== null && _c !== void 0 ? _c : 0,\n        (_d = parseCSSLength(verticalStyle2 || horizontalStyle2 || '0px', bounds.height)) !== null && _d !== void 0 ? _d : 0,\n    ];\n}\n/**\n * Returns the factor by which all border radii have to be scaled to fit correctly.\n *\n * @see https://drafts.csswg.org/css-backgrounds-3/#corner-overlap\n */\nconst calculateOverlappingCurvesFactor = (styles, bounds) => Math.min(...SIDES.map(side => {\n    const length = isHorizontal(side) ? bounds.width : bounds.height;\n    const radiiSum = getBorderRadiiForSide(side, styles, bounds).reduce((sum, radius) => sum + radius, 0);\n    return length / radiiSum;\n}), 1);\nconst isVisible = (styles) => styles.displayOutside !== 'none' &&\n    styles.display !== 'none' &&\n    styles.visibility !== 'hidden' &&\n    styles.opacity !== '0';\nfunction parseCSSLength(length, containerLength) {\n    if (length.endsWith('px')) {\n        return parseFloat(length);\n    }\n    if (length.endsWith('%')) {\n        return (parseFloat(length) / 100) * containerLength;\n    }\n    return undefined;\n}\nconst unescapeStringValue = (value) => value\n    // Replace hex escape sequences\n    .replace(/\\\\([\\da-f]{1,2})/gi, (substring, codePoint) => String.fromCodePoint(parseInt(codePoint, 16)))\n    // Replace all other escapes (quotes, backslash, etc)\n    .replace(/\\\\(.)/g, '$1');\nfunction copyCssStyles(from, to) {\n    for (const property of from) {\n        to.setProperty(property, from.getPropertyValue(property), from.getPropertyPriority(property));\n    }\n}\n//# sourceMappingURL=css.js.map\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/dom-to-svg/lib/css.js?");

/***/ }),

/***/ "./node_modules/dom-to-svg/lib/dom.js":
/*!********************************************!*\
  !*** ./node_modules/dom-to-svg/lib/dom.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"hasLabels\": () => (/* binding */ hasLabels),\n/* harmony export */   \"isCommentNode\": () => (/* binding */ isCommentNode),\n/* harmony export */   \"isElement\": () => (/* binding */ isElement),\n/* harmony export */   \"isHTMLAnchorElement\": () => (/* binding */ isHTMLAnchorElement),\n/* harmony export */   \"isHTMLElement\": () => (/* binding */ isHTMLElement),\n/* harmony export */   \"isHTMLImageElement\": () => (/* binding */ isHTMLImageElement),\n/* harmony export */   \"isHTMLInputElement\": () => (/* binding */ isHTMLInputElement),\n/* harmony export */   \"isHTMLLabelElement\": () => (/* binding */ isHTMLLabelElement),\n/* harmony export */   \"isSVGAnchorElement\": () => (/* binding */ isSVGAnchorElement),\n/* harmony export */   \"isSVGElement\": () => (/* binding */ isSVGElement),\n/* harmony export */   \"isSVGGraphicsElement\": () => (/* binding */ isSVGGraphicsElement),\n/* harmony export */   \"isSVGGroupElement\": () => (/* binding */ isSVGGroupElement),\n/* harmony export */   \"isSVGImageElement\": () => (/* binding */ isSVGImageElement),\n/* harmony export */   \"isSVGSVGElement\": () => (/* binding */ isSVGSVGElement),\n/* harmony export */   \"isSVGStyleElement\": () => (/* binding */ isSVGStyleElement),\n/* harmony export */   \"isSVGTextContentElement\": () => (/* binding */ isSVGTextContentElement),\n/* harmony export */   \"isTextNode\": () => (/* binding */ isTextNode),\n/* harmony export */   \"svgNamespace\": () => (/* binding */ svgNamespace),\n/* harmony export */   \"traverseDOM\": () => (/* binding */ traverseDOM),\n/* harmony export */   \"xhtmlNamespace\": () => (/* binding */ xhtmlNamespace),\n/* harmony export */   \"xlinkNamespace\": () => (/* binding */ xlinkNamespace)\n/* harmony export */ });\n// Namespaces\nconst svgNamespace = 'http://www.w3.org/2000/svg';\nconst xlinkNamespace = 'http://www.w3.org/1999/xlink';\nconst xhtmlNamespace = 'http://www.w3.org/1999/xhtml';\n// DOM\nconst isElement = (node) => node.nodeType === Node.ELEMENT_NODE;\nconst isTextNode = (node) => node.nodeType === Node.TEXT_NODE;\nconst isCommentNode = (node) => node.nodeType === Node.COMMENT_NODE;\n// SVG\nconst isSVGElement = (element) => element.namespaceURI === svgNamespace;\nconst isSVGSVGElement = (element) => isSVGElement(element) && element.tagName === 'svg';\nconst isSVGGraphicsElement = (element) => isSVGElement(element) && 'getCTM' in element && 'getScreenCTM' in element;\nconst isSVGGroupElement = (element) => isSVGElement(element) && element.tagName === 'g';\nconst isSVGAnchorElement = (element) => isSVGElement(element) && element.tagName === 'a';\nconst isSVGTextContentElement = (element) => isSVGElement(element) && 'textLength' in element;\nconst isSVGImageElement = (element) => element.tagName === 'image' && isSVGElement(element);\nconst isSVGStyleElement = (element) => element.tagName === 'style' && isSVGElement(element);\n// HTML\nconst isHTMLElement = (element) => element.namespaceURI === xhtmlNamespace;\nconst isHTMLAnchorElement = (element) => element.tagName === 'A' && isHTMLElement(element);\nconst isHTMLLabelElement = (element) => element.tagName === 'LABEL' && isHTMLElement(element);\nconst isHTMLImageElement = (element) => element.tagName === 'IMG' && isHTMLElement(element);\nconst isHTMLInputElement = (element) => element.tagName === 'INPUT' && isHTMLElement(element);\nconst hasLabels = (element) => 'labels' in element;\nfunction* traverseDOM(node, shouldEnter = () => true) {\n    yield node;\n    if (shouldEnter(node)) {\n        for (const childNode of node.childNodes) {\n            yield* traverseDOM(childNode);\n        }\n    }\n}\n//# sourceMappingURL=dom.js.map\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/dom-to-svg/lib/dom.js?");

/***/ }),

/***/ "./node_modules/dom-to-svg/lib/element.js":
/*!************************************************!*\
  !*** ./node_modules/dom-to-svg/lib/element.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"handleElement\": () => (/* binding */ handleElement)\n/* harmony export */ });\n/* harmony import */ var postcss_value_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! postcss-value-parser */ \"./node_modules/postcss-value-parser/lib/index.js\");\n/* harmony import */ var _accessibility_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./accessibility.js */ \"./node_modules/dom-to-svg/lib/accessibility.js\");\n/* harmony import */ var _css_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./css.js */ \"./node_modules/dom-to-svg/lib/css.js\");\n/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dom.js */ \"./node_modules/dom-to-svg/lib/dom.js\");\n/* harmony import */ var _gradients_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./gradients.js */ \"./node_modules/dom-to-svg/lib/gradients.js\");\n/* harmony import */ var _stacking_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stacking.js */ \"./node_modules/dom-to-svg/lib/stacking.js\");\n/* harmony import */ var _svg_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./svg.js */ \"./node_modules/dom-to-svg/lib/svg.js\");\n/* harmony import */ var _text_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./text.js */ \"./node_modules/dom-to-svg/lib/text.js\");\n/* harmony import */ var _traversal_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./traversal.js */ \"./node_modules/dom-to-svg/lib/traversal.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ \"./node_modules/dom-to-svg/lib/util.js\");\n\n\n\n\n\n\n\n\n\n\nfunction handleElement(element, context) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const cleanupFunctions = [];\n    try {\n        const window = element.ownerDocument.defaultView;\n        if (!window) {\n            throw new Error(\"Element's ownerDocument has no defaultView\");\n        }\n        const bounds = element.getBoundingClientRect(); // Includes borders\n        const rectanglesIntersect = (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.doRectanglesIntersect)(bounds, context.options.captureArea);\n        const styles = window.getComputedStyle(element);\n        const parentStyles = element.parentElement && window.getComputedStyle(element.parentElement);\n        const svgContainer = (0,_dom_js__WEBPACK_IMPORTED_MODULE_2__.isHTMLAnchorElement)(element) && context.options.keepLinks\n            ? createSvgAnchor(element, context)\n            : context.svgDocument.createElementNS(_dom_js__WEBPACK_IMPORTED_MODULE_2__.svgNamespace, 'g');\n        // Add IDs, classes, debug info\n        svgContainer.dataset.tag = element.tagName.toLowerCase();\n        const id = element.id || context.getUniqueId(element.classList[0] || element.tagName.toLowerCase());\n        svgContainer.id = id;\n        const className = element.getAttribute('class');\n        if (className) {\n            svgContainer.setAttribute('class', className);\n        }\n        // Title\n        if ((0,_dom_js__WEBPACK_IMPORTED_MODULE_2__.isHTMLElement)(element) && element.title) {\n            const svgTitle = context.svgDocument.createElementNS(_dom_js__WEBPACK_IMPORTED_MODULE_2__.svgNamespace, 'title');\n            svgTitle.textContent = element.title;\n            svgContainer.prepend(svgTitle);\n        }\n        // Which parent should the container itself be appended to?\n        const stackingLayerName = (0,_stacking_js__WEBPACK_IMPORTED_MODULE_3__.determineStackingLayer)(styles, parentStyles);\n        const stackingLayer = stackingLayerName\n            ? context.stackingLayers[stackingLayerName]\n            : context.parentStackingLayer;\n        if (stackingLayer) {\n            context.currentSvgParent.setAttribute('aria-owns', [context.currentSvgParent.getAttribute('aria-owns'), svgContainer.id].filter(Boolean).join(' '));\n        }\n        // If the parent is within the same stacking layer, append to the parent.\n        // Otherwise append to the right stacking layer.\n        const elementToAppendTo = context.parentStackingLayer === stackingLayer ? context.currentSvgParent : stackingLayer;\n        svgContainer.dataset.zIndex = styles.zIndex; // Used for sorting\n        elementToAppendTo.append(svgContainer);\n        // If the element establishes a stacking context, create subgroups for each stacking layer.\n        let childContext;\n        let backgroundContainer;\n        let ownStackingLayers;\n        if ((0,_stacking_js__WEBPACK_IMPORTED_MODULE_3__.establishesStackingContext)(styles, parentStyles)) {\n            ownStackingLayers = (0,_stacking_js__WEBPACK_IMPORTED_MODULE_3__.createStackingLayers)(svgContainer);\n            backgroundContainer = ownStackingLayers.rootBackgroundAndBorders;\n            childContext = {\n                ...context,\n                currentSvgParent: svgContainer,\n                stackingLayers: ownStackingLayers,\n                parentStackingLayer: stackingLayer,\n            };\n        }\n        else {\n            backgroundContainer = svgContainer;\n            childContext = {\n                ...context,\n                currentSvgParent: svgContainer,\n                parentStackingLayer: stackingLayer,\n            };\n        }\n        // Opacity\n        if (styles.opacity !== '1') {\n            svgContainer.setAttribute('opacity', styles.opacity);\n        }\n        // Accessibility\n        for (const [name, value] of (0,_accessibility_js__WEBPACK_IMPORTED_MODULE_4__.getAccessibilityAttributes)(element, context)) {\n            svgContainer.setAttribute(name, value);\n        }\n        // Handle ::before and ::after by creating temporary child elements in the DOM.\n        // Avoid infinite loop, in case `element` already is already a synthetic element created by us for a pseudo element.\n        if ((0,_dom_js__WEBPACK_IMPORTED_MODULE_2__.isHTMLElement)(element) && !element.dataset.pseudoElement) {\n            const handlePseudoElement = (pseudoSelector, position) => {\n                const pseudoElementStyles = window.getComputedStyle(element, pseudoSelector);\n                const content = postcss_value_parser__WEBPACK_IMPORTED_MODULE_0__(pseudoElementStyles.content).nodes.find((0,_util_js__WEBPACK_IMPORTED_MODULE_1__.isTaggedUnionMember)('type', 'string'));\n                if (!content) {\n                    return;\n                }\n                // Pseudo elements are inline by default (like a span)\n                const span = element.ownerDocument.createElement('span');\n                span.dataset.pseudoElement = pseudoSelector;\n                (0,_css_js__WEBPACK_IMPORTED_MODULE_5__.copyCssStyles)(pseudoElementStyles, span.style);\n                span.textContent = (0,_css_js__WEBPACK_IMPORTED_MODULE_5__.unescapeStringValue)(content.value);\n                element.dataset.pseudoElementOwner = id;\n                cleanupFunctions.push(() => element.removeAttribute('data-pseudo-element-owner'));\n                const style = element.ownerDocument.createElement('style');\n                // Hide the *actual* pseudo element temporarily while we have a real DOM equivalent in the DOM\n                style.textContent = `[data-pseudo-element-owner=\"${id}\"]${pseudoSelector} { display: none !important; }`;\n                element.before(style);\n                cleanupFunctions.push(() => style.remove());\n                element[position](span);\n                cleanupFunctions.push(() => span.remove());\n            };\n            handlePseudoElement('::before', 'prepend');\n            handlePseudoElement('::after', 'append');\n            // TODO handle ::marker etc\n        }\n        if (rectanglesIntersect) {\n            addBackgroundAndBorders(styles, bounds, backgroundContainer, window, context);\n        }\n        // If element is overflow: hidden, create a masking rectangle to hide any overflowing content of any descendants.\n        // Use <mask> instead of <clipPath> as Figma supports <mask>, but not <clipPath>.\n        if (styles.overflow !== 'visible') {\n            const mask = context.svgDocument.createElementNS(_dom_js__WEBPACK_IMPORTED_MODULE_2__.svgNamespace, 'mask');\n            mask.id = context.getUniqueId('mask-for-' + id);\n            const visibleRectangle = createBox(bounds, context);\n            visibleRectangle.setAttribute('fill', '#ffffff');\n            mask.append(visibleRectangle);\n            svgContainer.append(mask);\n            svgContainer.setAttribute('mask', `url(#${mask.id})`);\n            childContext = {\n                ...childContext,\n                ancestorMasks: [{ mask, forElement: element }, ...childContext.ancestorMasks],\n            };\n        }\n        if ((0,_dom_js__WEBPACK_IMPORTED_MODULE_2__.isHTMLElement)(element) &&\n            (styles.position === 'absolute' || styles.position === 'fixed') &&\n            context.ancestorMasks.length > 0 &&\n            element.offsetParent) {\n            // Absolute and fixed elements are out of the flow and will bleed out of an `overflow: hidden` ancestor\n            // as long as their offsetParent is higher up than the mask element.\n            for (const { mask, forElement } of context.ancestorMasks) {\n                if (element.offsetParent.contains(forElement) || element.offsetParent === forElement) {\n                    // Add a cutout to the ancestor mask\n                    const visibleRectangle = createBox(bounds, context);\n                    visibleRectangle.setAttribute('fill', '#ffffff');\n                    mask.append(visibleRectangle);\n                }\n                else {\n                    break;\n                }\n            }\n        }\n        if (rectanglesIntersect &&\n            (0,_dom_js__WEBPACK_IMPORTED_MODULE_2__.isHTMLImageElement)(element) &&\n            // Make sure the element has a src/srcset attribute (the relative URL). `element.src` is absolute and always defined.\n            (element.getAttribute('src') || element.getAttribute('srcset'))) {\n            const svgImage = context.svgDocument.createElementNS(_dom_js__WEBPACK_IMPORTED_MODULE_2__.svgNamespace, 'image');\n            svgImage.id = `${id}-image`; // read by inlineResources()\n            svgImage.setAttribute('xlink:href', element.currentSrc || element.src);\n            const paddingLeft = (_a = (0,_css_js__WEBPACK_IMPORTED_MODULE_5__.parseCSSLength)(styles.paddingLeft, bounds.width)) !== null && _a !== void 0 ? _a : 0;\n            const paddingRight = (_b = (0,_css_js__WEBPACK_IMPORTED_MODULE_5__.parseCSSLength)(styles.paddingRight, bounds.width)) !== null && _b !== void 0 ? _b : 0;\n            const paddingTop = (_c = (0,_css_js__WEBPACK_IMPORTED_MODULE_5__.parseCSSLength)(styles.paddingTop, bounds.height)) !== null && _c !== void 0 ? _c : 0;\n            const paddingBottom = (_d = (0,_css_js__WEBPACK_IMPORTED_MODULE_5__.parseCSSLength)(styles.paddingBottom, bounds.height)) !== null && _d !== void 0 ? _d : 0;\n            svgImage.setAttribute('x', (bounds.x + paddingLeft).toString());\n            svgImage.setAttribute('y', (bounds.y + paddingTop).toString());\n            svgImage.setAttribute('width', (bounds.width - paddingLeft - paddingRight).toString());\n            svgImage.setAttribute('height', (bounds.height - paddingTop - paddingBottom).toString());\n            if (element.alt) {\n                svgImage.setAttribute('aria-label', element.alt);\n            }\n            svgContainer.append(svgImage);\n        }\n        else if (rectanglesIntersect && (0,_dom_js__WEBPACK_IMPORTED_MODULE_2__.isHTMLInputElement)(element) && bounds.width > 0 && bounds.height > 0) {\n            // Handle button labels or input field content\n            if (element.value) {\n                const svgTextElement = context.svgDocument.createElementNS(_dom_js__WEBPACK_IMPORTED_MODULE_2__.svgNamespace, 'text');\n                (0,_text_js__WEBPACK_IMPORTED_MODULE_6__.copyTextStyles)(styles, svgTextElement);\n                svgTextElement.setAttribute('dominant-baseline', 'central');\n                svgTextElement.setAttribute('xml:space', 'preserve');\n                svgTextElement.setAttribute('x', (bounds.x + ((_e = (0,_css_js__WEBPACK_IMPORTED_MODULE_5__.parseCSSLength)(styles.paddingLeft, bounds.width)) !== null && _e !== void 0 ? _e : 0)).toString());\n                const top = bounds.top + ((_f = (0,_css_js__WEBPACK_IMPORTED_MODULE_5__.parseCSSLength)(styles.paddingTop, bounds.height)) !== null && _f !== void 0 ? _f : 0);\n                const bottom = bounds.bottom + ((_g = (0,_css_js__WEBPACK_IMPORTED_MODULE_5__.parseCSSLength)(styles.paddingBottom, bounds.height)) !== null && _g !== void 0 ? _g : 0);\n                const middle = (top + bottom) / 2;\n                svgTextElement.setAttribute('y', middle.toString());\n                svgTextElement.textContent = element.value;\n                childContext.stackingLayers.inFlowInlineLevelNonPositionedDescendants.append(svgTextElement);\n            }\n        }\n        else if (rectanglesIntersect && (0,_dom_js__WEBPACK_IMPORTED_MODULE_2__.isSVGSVGElement)(element) && (0,_css_js__WEBPACK_IMPORTED_MODULE_5__.isVisible)(styles)) {\n            (0,_svg_js__WEBPACK_IMPORTED_MODULE_7__.handleSvgNode)(element, { ...childContext, idPrefix: `${id}-` });\n        }\n        else {\n            // Walk children even if rectangles don't intersect,\n            // because children can overflow the parent's bounds as long as overflow: visible (default).\n            for (const child of element.childNodes) {\n                (0,_traversal_js__WEBPACK_IMPORTED_MODULE_8__.walkNode)(child, childContext);\n            }\n            if (ownStackingLayers) {\n                (0,_stacking_js__WEBPACK_IMPORTED_MODULE_3__.sortStackingLayerChildren)(ownStackingLayers);\n                (0,_stacking_js__WEBPACK_IMPORTED_MODULE_3__.cleanupStackingLayerChildren)(ownStackingLayers);\n            }\n        }\n    }\n    finally {\n        for (const cleanup of cleanupFunctions) {\n            cleanup();\n        }\n    }\n}\nfunction addBackgroundAndBorders(styles, bounds, backgroundAndBordersContainer, window, context) {\n    var _a, _b, _c, _d;\n    if ((0,_css_js__WEBPACK_IMPORTED_MODULE_5__.isVisible)(styles)) {\n        if (bounds.width > 0 &&\n            bounds.height > 0 &&\n            (!(0,_css_js__WEBPACK_IMPORTED_MODULE_5__.isTransparent)(styles.backgroundColor) || (0,_css_js__WEBPACK_IMPORTED_MODULE_5__.hasUniformBorder)(styles) || styles.backgroundImage !== 'none')) {\n            const box = createBackgroundAndBorderBox(bounds, styles, context);\n            backgroundAndBordersContainer.append(box);\n            if (styles.backgroundImage !== 'none') {\n                const backgrounds = postcss_value_parser__WEBPACK_IMPORTED_MODULE_0__(styles.backgroundImage)\n                    .nodes.filter((0,_util_js__WEBPACK_IMPORTED_MODULE_1__.isTaggedUnionMember)('type', 'function'))\n                    .reverse();\n                const xBackgroundPositions = styles.backgroundPositionX.split(/\\s*,\\s*/g);\n                const yBackgroundPositions = styles.backgroundPositionY.split(/\\s*,\\s*/g);\n                const backgroundRepeats = styles.backgroundRepeat.split(/\\s*,\\s*/g);\n                for (const [index, backgroundNode] of backgrounds.entries()) {\n                    const backgroundPositionX = (_a = (0,_css_js__WEBPACK_IMPORTED_MODULE_5__.parseCSSLength)(xBackgroundPositions[index], bounds.width)) !== null && _a !== void 0 ? _a : 0;\n                    const backgroundPositionY = (_b = (0,_css_js__WEBPACK_IMPORTED_MODULE_5__.parseCSSLength)(yBackgroundPositions[index], bounds.height)) !== null && _b !== void 0 ? _b : 0;\n                    const backgroundRepeat = backgroundRepeats[index];\n                    if (backgroundNode.value === 'url' && backgroundNode.nodes[0]) {\n                        const urlArgument = backgroundNode.nodes[0];\n                        const image = context.svgDocument.createElementNS(_dom_js__WEBPACK_IMPORTED_MODULE_2__.svgNamespace, 'image');\n                        image.id = context.getUniqueId('background-image'); // read by inlineResources()\n                        const [cssWidth = 'auto', cssHeight = 'auto'] = styles.backgroundSize.split(' ');\n                        const backgroundWidth = (_c = (0,_css_js__WEBPACK_IMPORTED_MODULE_5__.parseCSSLength)(cssWidth, bounds.width)) !== null && _c !== void 0 ? _c : bounds.width;\n                        const backgroundHeight = (_d = (0,_css_js__WEBPACK_IMPORTED_MODULE_5__.parseCSSLength)(cssHeight, bounds.height)) !== null && _d !== void 0 ? _d : bounds.height;\n                        image.setAttribute('width', backgroundWidth.toString());\n                        image.setAttribute('height', backgroundHeight.toString());\n                        if (cssWidth !== 'auto' && cssHeight !== 'auto') {\n                            image.setAttribute('preserveAspectRatio', 'none');\n                        }\n                        else if (styles.backgroundSize === 'contain') {\n                            image.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n                        }\n                        else if (styles.backgroundSize === 'cover') {\n                            image.setAttribute('preserveAspectRatio', 'xMidYMid slice');\n                        }\n                        // Technically not correct, because relative URLs should be resolved relative to the stylesheet,\n                        // not the page. But we have no means to know what stylesheet the style came from\n                        // (unless we iterate through all rules in all style sheets and find the matching one).\n                        const url = new URL((0,_css_js__WEBPACK_IMPORTED_MODULE_5__.unescapeStringValue)(urlArgument.value), window.location.href);\n                        image.setAttribute('xlink:href', url.href);\n                        if (backgroundRepeat === 'no-repeat' ||\n                            (backgroundPositionX === 0 &&\n                                backgroundPositionY === 0 &&\n                                backgroundWidth === bounds.width &&\n                                backgroundHeight === bounds.height)) {\n                            image.setAttribute('x', bounds.x.toString());\n                            image.setAttribute('y', bounds.y.toString());\n                            backgroundAndBordersContainer.append(image);\n                        }\n                        else {\n                            image.setAttribute('x', '0');\n                            image.setAttribute('y', '0');\n                            const pattern = context.svgDocument.createElementNS(_dom_js__WEBPACK_IMPORTED_MODULE_2__.svgNamespace, 'pattern');\n                            pattern.setAttribute('patternUnits', 'userSpaceOnUse');\n                            pattern.setAttribute('patternContentUnits', 'userSpaceOnUse');\n                            pattern.setAttribute('x', (bounds.x + backgroundPositionX).toString());\n                            pattern.setAttribute('y', (bounds.y + backgroundPositionY).toString());\n                            pattern.setAttribute('width', (backgroundRepeat === 'repeat' || backgroundRepeat === 'repeat-x'\n                                ? backgroundWidth\n                                : // If background shouldn't repeat on this axis, make the tile as big as the element so the repetition is cut off.\n                                    backgroundWidth + bounds.x + backgroundPositionX).toString());\n                            pattern.setAttribute('height', (backgroundRepeat === 'repeat' || backgroundRepeat === 'repeat-y'\n                                ? backgroundHeight\n                                : // If background shouldn't repeat on this axis, make the tile as big as the element so the repetition is cut off.\n                                    backgroundHeight + bounds.y + backgroundPositionY).toString());\n                            pattern.id = context.getUniqueId('pattern');\n                            pattern.append(image);\n                            box.before(pattern);\n                            box.setAttribute('fill', `url(#${pattern.id})`);\n                        }\n                    }\n                    else if (/^(-webkit-)?linear-gradient$/.test(backgroundNode.value)) {\n                        const linearGradientCss = postcss_value_parser__WEBPACK_IMPORTED_MODULE_0__.stringify(backgroundNode);\n                        const svgLinearGradient = (0,_gradients_js__WEBPACK_IMPORTED_MODULE_9__.convertLinearGradient)(linearGradientCss, context);\n                        if (backgroundPositionX !== 0 || backgroundPositionY !== 0) {\n                            svgLinearGradient.setAttribute('gradientTransform', `translate(${backgroundPositionX}, ${backgroundPositionY})`);\n                        }\n                        svgLinearGradient.id = context.getUniqueId('linear-gradient');\n                        box.before(svgLinearGradient);\n                        box.setAttribute('fill', `url(#${svgLinearGradient.id})`);\n                    }\n                }\n            }\n        }\n        if (!(0,_css_js__WEBPACK_IMPORTED_MODULE_5__.hasUniformBorder)(styles)) {\n            // Draw lines for each border\n            for (const borderLine of createBorders(styles, bounds, context)) {\n                backgroundAndBordersContainer.append(borderLine);\n            }\n        }\n    }\n}\nfunction createBox(bounds, context) {\n    const box = context.svgDocument.createElementNS(_dom_js__WEBPACK_IMPORTED_MODULE_2__.svgNamespace, 'rect');\n    // TODO consider rotation\n    box.setAttribute('width', bounds.width.toString());\n    box.setAttribute('height', bounds.height.toString());\n    box.setAttribute('x', bounds.x.toString());\n    box.setAttribute('y', bounds.y.toString());\n    return box;\n}\nfunction createBackgroundAndBorderBox(bounds, styles, context) {\n    const background = createBox(bounds, context);\n    // TODO handle background image and other properties\n    if (styles.backgroundColor) {\n        background.setAttribute('fill', styles.backgroundColor);\n    }\n    if ((0,_css_js__WEBPACK_IMPORTED_MODULE_5__.hasUniformBorder)(styles)) {\n        // Uniform border, use stroke\n        // Cannot use borderColor/borderWidth directly as in Firefox those are empty strings.\n        // Need to get the border property from some specific side (they are all the same in this condition).\n        // https://stackoverflow.com/questions/41696063/getcomputedstyle-returns-empty-strings-on-ff-when-instead-crome-returns-a-comp\n        background.setAttribute('stroke', styles.borderTopColor);\n        background.setAttribute('stroke-width', styles.borderTopWidth);\n        if (styles.borderTopStyle === 'dashed') {\n            // > Displays a series of short square-ended dashes or line segments.\n            // > The exact size and length of the segments are not defined by the specification and are implementation-specific.\n            background.setAttribute('stroke-dasharray', '1');\n        }\n    }\n    // Set border radius\n    // Approximation, always assumes uniform border-radius by using the top-left horizontal radius and the top-left vertical radius for all corners.\n    // TODO support irregular border radii on all corners by drawing border as a <path>.\n    const overlappingCurvesFactor = (0,_css_js__WEBPACK_IMPORTED_MODULE_5__.calculateOverlappingCurvesFactor)(styles, bounds);\n    const radiusX = (0,_css_js__WEBPACK_IMPORTED_MODULE_5__.getBorderRadiiForSide)('top', styles, bounds)[0] * overlappingCurvesFactor;\n    const radiusY = (0,_css_js__WEBPACK_IMPORTED_MODULE_5__.getBorderRadiiForSide)('left', styles, bounds)[0] * overlappingCurvesFactor;\n    if (radiusX !== 0) {\n        background.setAttribute('rx', radiusX.toString());\n    }\n    if (radiusY !== 0) {\n        background.setAttribute('ry', radiusY.toString());\n    }\n    return background;\n}\nfunction* createBorders(styles, bounds, context) {\n    for (const side of ['top', 'bottom', 'right', 'left']) {\n        if (hasBorder(styles, side)) {\n            yield createBorder(styles, bounds, side, context);\n        }\n    }\n}\nfunction hasBorder(styles, side) {\n    return (!!styles.getPropertyValue(`border-${side}-color`) &&\n        !(0,_css_js__WEBPACK_IMPORTED_MODULE_5__.isTransparent)(styles.getPropertyValue(`border-${side}-color`)) &&\n        styles.getPropertyValue(`border-${side}-width`) !== '0px');\n}\nfunction createBorder(styles, bounds, side, context) {\n    // TODO handle border-radius for non-uniform borders\n    const border = context.svgDocument.createElementNS(_dom_js__WEBPACK_IMPORTED_MODULE_2__.svgNamespace, 'line');\n    border.setAttribute('stroke-linecap', 'square');\n    const color = styles.getPropertyValue(`border-${side}-color`);\n    border.setAttribute('stroke', color);\n    border.setAttribute('stroke-width', styles.getPropertyValue(`border-${side}-width`));\n    // Handle inset/outset borders\n    const borderStyle = styles.getPropertyValue(`border-${side}-style`);\n    if ((borderStyle === 'inset' && (side === 'top' || side === 'left')) ||\n        (borderStyle === 'outset' && (side === 'right' || side === 'bottom'))) {\n        const match = color.match(/rgba?\\((\\d+), (\\d+), (\\d+)(?:, ([\\d.]+))?\\)/);\n        if (!match) {\n            throw new Error(`Unexpected color: ${color}`);\n        }\n        const components = match.slice(1, 4).map(value => parseInt(value, 10) * 0.3);\n        if (match[4]) {\n            components.push(parseFloat(match[4]));\n        }\n        // Low-light border\n        // https://stackoverflow.com/questions/4147940/how-do-browsers-determine-which-exact-colors-to-use-for-border-inset-or-outset\n        border.setAttribute('stroke', `rgba(${components.join(', ')})`);\n    }\n    if (side === 'top') {\n        border.setAttribute('x1', bounds.left.toString());\n        border.setAttribute('x2', bounds.right.toString());\n        border.setAttribute('y1', bounds.top.toString());\n        border.setAttribute('y2', bounds.top.toString());\n    }\n    else if (side === 'left') {\n        border.setAttribute('x1', bounds.left.toString());\n        border.setAttribute('x2', bounds.left.toString());\n        border.setAttribute('y1', bounds.top.toString());\n        border.setAttribute('y2', bounds.bottom.toString());\n    }\n    else if (side === 'right') {\n        border.setAttribute('x1', bounds.right.toString());\n        border.setAttribute('x2', bounds.right.toString());\n        border.setAttribute('y1', bounds.top.toString());\n        border.setAttribute('y2', bounds.bottom.toString());\n    }\n    else if (side === 'bottom') {\n        border.setAttribute('x1', bounds.left.toString());\n        border.setAttribute('x2', bounds.right.toString());\n        border.setAttribute('y1', bounds.bottom.toString());\n        border.setAttribute('y2', bounds.bottom.toString());\n    }\n    return border;\n}\nfunction createSvgAnchor(element, context) {\n    const svgAnchor = context.svgDocument.createElementNS(_dom_js__WEBPACK_IMPORTED_MODULE_2__.svgNamespace, 'a');\n    if (element.href && !element.href.startsWith('javascript:')) {\n        svgAnchor.setAttribute('href', element.href);\n    }\n    if (element.rel) {\n        svgAnchor.setAttribute('rel', element.rel);\n    }\n    if (element.target) {\n        svgAnchor.setAttribute('target', element.target);\n    }\n    if (element.download) {\n        svgAnchor.setAttribute('download', element.download);\n    }\n    return svgAnchor;\n}\n//# sourceMappingURL=element.js.map\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/dom-to-svg/lib/element.js?");

/***/ }),

/***/ "./node_modules/dom-to-svg/lib/gradients.js":
/*!**************************************************!*\
  !*** ./node_modules/dom-to-svg/lib/gradients.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"convertLinearGradient\": () => (/* binding */ convertLinearGradient)\n/* harmony export */ });\n/* harmony import */ var gradient_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gradient-parser */ \"./node_modules/gradient-parser/build/node.js\");\n/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom.js */ \"./node_modules/dom-to-svg/lib/dom.js\");\n/* eslint-disable id-length */\n\n\nconst positionsForOrientation = (orientation) => {\n    const positions = {\n        x1: '0%',\n        x2: '0%',\n        y1: '0%',\n        y2: '0%',\n    };\n    if ((orientation === null || orientation === void 0 ? void 0 : orientation.type) === 'angular') {\n        const anglePI = orientation.value * (Math.PI / 180);\n        positions.x1 = `${Math.round(50 + Math.sin(anglePI + Math.PI) * 50)}%`;\n        positions.y1 = `${Math.round(50 + Math.cos(anglePI) * 50)}%`;\n        positions.x2 = `${Math.round(50 + Math.sin(anglePI) * 50)}%`;\n        positions.y2 = `${Math.round(50 + Math.cos(anglePI + Math.PI) * 50)}%`;\n    }\n    else if ((orientation === null || orientation === void 0 ? void 0 : orientation.type) === 'directional') {\n        switch (orientation.value) {\n            case 'left':\n                positions.x1 = '100%';\n                break;\n            case 'top':\n                positions.y1 = '100%';\n                break;\n            case 'right':\n                positions.x2 = '100%';\n                break;\n            case 'bottom':\n                positions.y2 = '100%';\n                break;\n        }\n    }\n    return positions;\n};\nfunction convertLinearGradient(css, { svgDocument }) {\n    const { orientation, colorStops } = gradient_parser__WEBPACK_IMPORTED_MODULE_0__.parse(css)[0];\n    const { x1, x2, y1, y2 } = positionsForOrientation(orientation);\n    const getColorStops = (colorStop, index) => {\n        const offset = `${(index / (colorStops.length - 1)) * 100}%`;\n        let stopColor = 'rgb(0,0,0)';\n        let stopOpacity = 1;\n        switch (colorStop.type) {\n            case 'rgb': {\n                const [red, green, blue] = colorStop.value;\n                stopColor = `rgb(${red},${green},${blue})`;\n                break;\n            }\n            case 'rgba': {\n                const [red, green, blue, alpha] = colorStop.value;\n                stopColor = `rgb(${red},${green},${blue})`;\n                stopOpacity = alpha;\n                break;\n            }\n            case 'hex': {\n                stopColor = `#${colorStop.value}`;\n                break;\n            }\n            case 'literal': {\n                stopColor = colorStop.value;\n                break;\n            }\n        }\n        const stop = svgDocument.createElementNS(_dom_js__WEBPACK_IMPORTED_MODULE_1__.svgNamespace, 'stop');\n        stop.setAttribute('offset', offset);\n        stop.setAttribute('stop-color', stopColor);\n        stop.setAttribute('stop-opacity', stopOpacity.toString());\n        return stop;\n    };\n    const linearGradient = svgDocument.createElementNS(_dom_js__WEBPACK_IMPORTED_MODULE_1__.svgNamespace, 'linearGradient');\n    linearGradient.setAttribute('x1', x1);\n    linearGradient.setAttribute('y1', y1);\n    linearGradient.setAttribute('x2', x2);\n    linearGradient.setAttribute('y2', y2);\n    linearGradient.append(...colorStops.map(getColorStops));\n    return linearGradient;\n}\n//# sourceMappingURL=gradients.js.map\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/dom-to-svg/lib/gradients.js?");

/***/ }),

/***/ "./node_modules/dom-to-svg/lib/index.js":
/*!**********************************************!*\
  !*** ./node_modules/dom-to-svg/lib/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"documentToSVG\": () => (/* binding */ documentToSVG),\n/* harmony export */   \"elementToSVG\": () => (/* binding */ elementToSVG),\n/* harmony export */   \"inlineResources\": () => (/* reexport safe */ _inline_js__WEBPACK_IMPORTED_MODULE_7__.inlineResources)\n/* harmony export */ });\n/* harmony import */ var postcss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! postcss */ \"./node_modules/postcss/lib/postcss.mjs\");\n/* harmony import */ var postcss_value_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! postcss-value-parser */ \"./node_modules/postcss-value-parser/lib/index.js\");\n/* harmony import */ var _css_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./css.js */ \"./node_modules/dom-to-svg/lib/css.js\");\n/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dom.js */ \"./node_modules/dom-to-svg/lib/dom.js\");\n/* harmony import */ var _stacking_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./stacking.js */ \"./node_modules/dom-to-svg/lib/stacking.js\");\n/* harmony import */ var _traversal_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./traversal.js */ \"./node_modules/dom-to-svg/lib/traversal.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util.js */ \"./node_modules/dom-to-svg/lib/util.js\");\n/* harmony import */ var _inline_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./inline.js */ \"./node_modules/dom-to-svg/lib/inline.js\");\n\n\n\n\n\n\n\nfunction documentToSVG(document, options) {\n    return elementToSVG(document.documentElement, options);\n}\nfunction elementToSVG(element, options) {\n    var _a, _b, _c, _d;\n    const svgDocument = element.ownerDocument.implementation.createDocument(_dom_js__WEBPACK_IMPORTED_MODULE_2__.svgNamespace, 'svg', null);\n    const svgElement = svgDocument.documentElement;\n    svgElement.setAttribute('xmlns', _dom_js__WEBPACK_IMPORTED_MODULE_2__.svgNamespace);\n    svgElement.setAttribute('xmlns:xlink', _dom_js__WEBPACK_IMPORTED_MODULE_2__.xlinkNamespace);\n    svgElement.append(svgDocument.createComment(\n    // \"--\" is invalid in comments, percent-encode.\n    ` Generated by dom-to-svg from ${element.ownerDocument.location.href.replace(/--/g, '%2D%2D')} `));\n    // Copy @font-face rules\n    const styleElement = svgDocument.createElementNS(_dom_js__WEBPACK_IMPORTED_MODULE_2__.svgNamespace, 'style');\n    for (const styleSheet of element.ownerDocument.styleSheets) {\n        try {\n            // Make font URLs absolute (need to be resolved relative to the stylesheet)\n            for (const rule of (_a = styleSheet.rules) !== null && _a !== void 0 ? _a : []) {\n                if (!(0,_css_js__WEBPACK_IMPORTED_MODULE_3__.isCSSFontFaceRule)(rule)) {\n                    continue;\n                }\n                const styleSheetHref = (_b = rule.parentStyleSheet) === null || _b === void 0 ? void 0 : _b.href;\n                if (styleSheetHref) {\n                    // Note: Firefox does not implement rule.style.src, need to use rule.style.getPropertyValue()\n                    const parsedSourceValue = postcss_value_parser__WEBPACK_IMPORTED_MODULE_1__(rule.style.getPropertyValue('src'));\n                    parsedSourceValue.walk(node => {\n                        if (node.type === 'function' && node.value === 'url' && node.nodes[0]) {\n                            const urlArgumentNode = node.nodes[0];\n                            if (urlArgumentNode.type === 'string' || urlArgumentNode.type === 'word') {\n                                urlArgumentNode.value = new URL((0,_css_js__WEBPACK_IMPORTED_MODULE_3__.unescapeStringValue)(urlArgumentNode.value), styleSheetHref).href;\n                            }\n                        }\n                    });\n                    // Firefox does not support changing `src` on CSSFontFaceRule declarations, need to use PostCSS.\n                    const updatedFontFaceRule = postcss__WEBPACK_IMPORTED_MODULE_0__.parse(rule.cssText);\n                    updatedFontFaceRule.walkDecls('src', declaration => {\n                        declaration.value = postcss_value_parser__WEBPACK_IMPORTED_MODULE_1__.stringify(parsedSourceValue.nodes);\n                    });\n                    styleElement.append(updatedFontFaceRule.toString() + '\\n');\n                }\n            }\n        }\n        catch (error) {\n            console.error('Error resolving @font-face src URLs for styleSheet, skipping', styleSheet, error);\n        }\n    }\n    svgElement.append(styleElement);\n    (0,_traversal_js__WEBPACK_IMPORTED_MODULE_4__.walkNode)(element, {\n        svgDocument,\n        currentSvgParent: svgElement,\n        stackingLayers: (0,_stacking_js__WEBPACK_IMPORTED_MODULE_5__.createStackingLayers)(svgElement),\n        parentStackingLayer: svgElement,\n        getUniqueId: (0,_util_js__WEBPACK_IMPORTED_MODULE_6__.createIdGenerator)(),\n        labels: new Map(),\n        ancestorMasks: [],\n        options: {\n            captureArea: (_c = options === null || options === void 0 ? void 0 : options.captureArea) !== null && _c !== void 0 ? _c : element.getBoundingClientRect(),\n            keepLinks: (options === null || options === void 0 ? void 0 : options.keepLinks) !== false,\n        },\n    });\n    const bounds = (_d = options === null || options === void 0 ? void 0 : options.captureArea) !== null && _d !== void 0 ? _d : element.getBoundingClientRect();\n    svgElement.setAttribute('width', bounds.width.toString());\n    svgElement.setAttribute('height', bounds.height.toString());\n    svgElement.setAttribute('viewBox', `${bounds.x} ${bounds.y} ${bounds.width} ${bounds.height}`);\n    return svgDocument;\n}\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/dom-to-svg/lib/index.js?");

/***/ }),

/***/ "./node_modules/dom-to-svg/lib/inline.js":
/*!***********************************************!*\
  !*** ./node_modules/dom-to-svg/lib/inline.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"inlineResources\": () => (/* binding */ inlineResources)\n/* harmony export */ });\n/* harmony import */ var postcss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! postcss */ \"./node_modules/postcss/lib/postcss.mjs\");\n/* harmony import */ var postcss_value_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! postcss-value-parser */ \"./node_modules/postcss-value-parser/lib/index.js\");\n/* harmony import */ var _css_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./css.js */ \"./node_modules/dom-to-svg/lib/css.js\");\n/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dom.js */ \"./node_modules/dom-to-svg/lib/dom.js\");\n/* harmony import */ var _svg_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./svg.js */ \"./node_modules/dom-to-svg/lib/svg.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util.js */ \"./node_modules/dom-to-svg/lib/util.js\");\n\n\n\n\n\n\n/**\n * Inlines all external resources of the given element, such as fonts and images.\n *\n * Fonts and binary images are inlined as Base64 data: URIs.\n *\n * Images that reference another SVG are inlined by inlining the embedded SVG into the output SVG.\n * Note: The passed element needs to be attached to a document with a window (`defaultView`) for this so that `getComputedStyle()` can be used.\n */\nasync function inlineResources(element) {\n    await Promise.all([\n        ...[...element.children].map(inlineResources),\n        (async () => {\n            var _a;\n            if ((0,_dom_js__WEBPACK_IMPORTED_MODULE_2__.isSVGImageElement)(element)) {\n                const blob = await (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.withTimeout)(10000, `Timeout fetching ${element.href.baseVal}`, () => fetchResource(element.href.baseVal));\n                if (blob.type === 'image/svg+xml') {\n                    // If the image is an SVG, inline it into the output SVG.\n                    // Some tools (e.g. Figma) do not support nested SVG.\n                    (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.assert)(element.ownerDocument, 'Expected <image> element to have ownerDocument');\n                    // Replace <image> with inline <svg>\n                    const embeddedSvgDocument = new DOMParser().parseFromString(await blob.text(), 'image/svg+xml');\n                    const svgRoot = embeddedSvgDocument.documentElement;\n                    svgRoot.setAttribute('x', element.getAttribute('x'));\n                    svgRoot.setAttribute('y', element.getAttribute('y'));\n                    svgRoot.setAttribute('width', element.getAttribute('width'));\n                    svgRoot.setAttribute('height', element.getAttribute('height'));\n                    svgRoot.remove();\n                    element.replaceWith(svgRoot);\n                    try {\n                        // Let handleSvgNode inline the <svg> into a simple <g>\n                        const svgDocument = element.ownerDocument;\n                        const mount = svgDocument.createElementNS(_dom_js__WEBPACK_IMPORTED_MODULE_2__.svgNamespace, 'g');\n                        (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.assert)(element.id, '<image> element must have ID');\n                        (0,_svg_js__WEBPACK_IMPORTED_MODULE_4__.handleSvgNode)(svgRoot, {\n                            currentSvgParent: mount,\n                            svgDocument,\n                            idPrefix: `${element.id}-`,\n                            options: {\n                                // SVGs embedded through <img> are never interactive.\n                                keepLinks: false,\n                                captureArea: svgRoot.viewBox.baseVal,\n                            },\n                        });\n                        // Replace the <svg> element with the <g>\n                        mount.dataset.tag = 'img';\n                        mount.setAttribute('role', 'img');\n                        svgRoot.replaceWith(mount);\n                    }\n                    finally {\n                        svgRoot.remove();\n                    }\n                }\n                else {\n                    // Inline binary images as base64 data: URL\n                    const dataUrl = await blobToDataURL(blob);\n                    element.dataset.src = element.href.baseVal;\n                    element.setAttribute('xlink:href', dataUrl.href);\n                }\n            }\n            else if ((0,_dom_js__WEBPACK_IMPORTED_MODULE_2__.isSVGStyleElement)(element)) {\n                try {\n                    const promises = [];\n                    // Walk the stylesheet and replace @font-face src URLs with data URIs\n                    const parsedSheet = postcss__WEBPACK_IMPORTED_MODULE_0__.parse((_a = element.textContent) !== null && _a !== void 0 ? _a : '');\n                    parsedSheet.walkAtRules('font-face', fontFaceRule => {\n                        fontFaceRule.walkDecls('src', sourceDeclaration => {\n                            const parsedSourceValue = postcss_value_parser__WEBPACK_IMPORTED_MODULE_1__(sourceDeclaration.value);\n                            parsedSourceValue.walk(node => {\n                                if (node.type === 'function' && node.value === 'url' && node.nodes[0]) {\n                                    const urlArgumentNode = node.nodes[0];\n                                    if (urlArgumentNode.type === 'string' || urlArgumentNode.type === 'word') {\n                                        promises.push(inlineCssFontUrlArgumentNode(urlArgumentNode));\n                                    }\n                                }\n                            });\n                            sourceDeclaration.value = postcss_value_parser__WEBPACK_IMPORTED_MODULE_1__.stringify(parsedSourceValue.nodes);\n                        });\n                    });\n                    await Promise.all(promises);\n                    // Update <style> element with updated CSS\n                    element.textContent = parsedSheet.toString();\n                }\n                catch (error) {\n                    console.error('Error inlining stylesheet', element.sheet, error);\n                }\n            }\n        })().catch(error => {\n            console.error('Error inlining resource for element', element, error);\n        }),\n    ]);\n}\n/**\n * Fetches the font from a `url()` CSS node and replaces it with a `data:` URI of the content.\n */\nasync function inlineCssFontUrlArgumentNode(urlArgumentNode) {\n    try {\n        const url = new URL((0,_css_js__WEBPACK_IMPORTED_MODULE_5__.unescapeStringValue)(urlArgumentNode.value));\n        const blob = await (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.withTimeout)(10000, `Timeout fetching ${url.href}`, () => fetchResource(url.href));\n        if (!blob.type.startsWith('font/') &&\n            !blob.type.startsWith('application/font-') &&\n            !blob.type.startsWith('application/x-font-') &&\n            !blob.type.startsWith('image/svg+xml') &&\n            !blob.type.startsWith('application/vnd.ms-fontobject')) {\n            throw new Error(`Invalid response MIME type inlining font at ${url.href}: Expected font MIME type, got ${blob.type}`);\n        }\n        const dataUrl = await blobToDataURL(blob);\n        urlArgumentNode.value = dataUrl.href;\n    }\n    catch (error) {\n        console.error(`Error inlining ${urlArgumentNode.value}`, error);\n    }\n}\nasync function fetchResource(url) {\n    (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.assert)(url, 'No URL passed');\n    const headers = new Headers();\n    const response = await fetch(url, { headers });\n    if (!response.ok) {\n        throw new Error(response.statusText);\n    }\n    const blob = await response.blob();\n    return blob;\n}\nasync function blobToDataURL(blob) {\n    const reader = new FileReader();\n    await new Promise((resolve, reject) => {\n        reader.addEventListener('error', () => reject(new Error('Error loading resource with FileLoader')));\n        reader.addEventListener('load', () => resolve());\n        reader.readAsDataURL(blob);\n    });\n    return new URL(reader.result);\n}\n//# sourceMappingURL=inline.js.map\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/dom-to-svg/lib/inline.js?");

/***/ }),

/***/ "./node_modules/dom-to-svg/lib/stacking.js":
/*!*************************************************!*\
  !*** ./node_modules/dom-to-svg/lib/stacking.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cleanupStackingLayerChildren\": () => (/* binding */ cleanupStackingLayerChildren),\n/* harmony export */   \"createStackingLayers\": () => (/* binding */ createStackingLayers),\n/* harmony export */   \"determineStackingLayer\": () => (/* binding */ determineStackingLayer),\n/* harmony export */   \"establishesStackingContext\": () => (/* binding */ establishesStackingContext),\n/* harmony export */   \"sortChildrenByZIndex\": () => (/* binding */ sortChildrenByZIndex),\n/* harmony export */   \"sortStackingLayerChildren\": () => (/* binding */ sortStackingLayerChildren)\n/* harmony export */ });\n/* harmony import */ var _css_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./css.js */ \"./node_modules/dom-to-svg/lib/css.js\");\n/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom.js */ \"./node_modules/dom-to-svg/lib/dom.js\");\n\n\nconst stackingContextEstablishingProperties = new Set([\n    'clipPath',\n    'contain',\n    'filter',\n    'isolation',\n    'mask',\n    'maskBorder',\n    'maskImage',\n    'mixBlendMode',\n    'opacity',\n    'perspective',\n    'position',\n    'transform',\n    'webkitOverflowScrolling',\n    'zIndex',\n]);\nfunction establishesStackingContext(styles, parentStyles) {\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context\n    return !!(((styles.position === 'absolute' || styles.position === 'relative') && styles.zIndex !== 'auto') ||\n        styles.position === 'fixed' ||\n        styles.position === 'sticky' ||\n        (parentStyles &&\n            (parentStyles.display === 'flex' || parentStyles.display === 'grid') &&\n            styles.zIndex !== 'auto') ||\n        parseFloat(styles.opacity) !== 1 ||\n        styles.mixBlendMode !== 'normal' ||\n        styles.transform !== 'none' ||\n        styles.filter !== 'none' ||\n        styles.perspective !== 'none' ||\n        styles.clipPath !== 'none' ||\n        styles.mask !== 'none' ||\n        styles.maskImage !== 'none' ||\n        styles.maskBorder !== 'none' ||\n        styles.isolation === 'isolate' ||\n        styles.webkitOverflowScrolling === 'touch' ||\n        styles.contain === 'layout' ||\n        styles.contain === 'paint' ||\n        styles.contain === 'strict' ||\n        styles.contain === 'content' ||\n        styles.willChange.split(',').some(property => stackingContextEstablishingProperties.has(property.trim())));\n}\nconst STACKING_LAYER_NAMES = [\n    'rootBackgroundAndBorders',\n    'childStackingContextsWithNegativeStackLevels',\n    'inFlowNonInlineNonPositionedDescendants',\n    'nonPositionedFloats',\n    'inFlowInlineLevelNonPositionedDescendants',\n    'childStackingContextsWithStackLevelZeroAndPositionedDescendantsWithStackLevelZero',\n    'childStackingContextsWithPositiveStackLevels',\n];\nfunction createStackingLayer(parent, layerName) {\n    const layer = parent.ownerDocument.createElementNS(_dom_js__WEBPACK_IMPORTED_MODULE_0__.svgNamespace, 'g');\n    layer.dataset.stackingLayer = layerName;\n    parent.append(layer);\n    return layer;\n}\nfunction createStackingLayers(container) {\n    container.dataset.stackingContext = 'true';\n    return {\n        rootBackgroundAndBorders: createStackingLayer(container, 'rootBackgroundAndBorders'),\n        childStackingContextsWithNegativeStackLevels: createStackingLayer(container, 'childStackingContextsWithNegativeStackLevels'),\n        inFlowNonInlineNonPositionedDescendants: createStackingLayer(container, 'inFlowNonInlineNonPositionedDescendants'),\n        nonPositionedFloats: createStackingLayer(container, 'nonPositionedFloats'),\n        inFlowInlineLevelNonPositionedDescendants: createStackingLayer(container, 'inFlowInlineLevelNonPositionedDescendants'),\n        childStackingContextsWithStackLevelZeroAndPositionedDescendantsWithStackLevelZero: createStackingLayer(container, 'childStackingContextsWithStackLevelZeroAndPositionedDescendantsWithStackLevelZero'),\n        childStackingContextsWithPositiveStackLevels: createStackingLayer(container, 'childStackingContextsWithPositiveStackLevels'),\n    };\n}\nfunction determineStackingLayer(styles, parentStyles) {\n    // https://www.w3.org/TR/CSS22/visuren.html#layers\n    // https://www.w3.org/TR/CSS22/zindex.html\n    // Note: the root element is not handled here, but in handleElement().\n    const zIndex = styles.zIndex !== 'auto' ? parseInt(styles.zIndex, 10) : undefined;\n    if (zIndex !== undefined && zIndex < 0 && establishesStackingContext(styles, parentStyles)) {\n        return 'childStackingContextsWithNegativeStackLevels';\n    }\n    if ((0,_css_js__WEBPACK_IMPORTED_MODULE_1__.isInFlow)(styles) && !(0,_css_js__WEBPACK_IMPORTED_MODULE_1__.isInline)(styles) && !(0,_css_js__WEBPACK_IMPORTED_MODULE_1__.isPositioned)(styles)) {\n        return 'inFlowNonInlineNonPositionedDescendants';\n    }\n    if (!(0,_css_js__WEBPACK_IMPORTED_MODULE_1__.isPositioned)(styles) && styles.float !== 'none') {\n        return 'nonPositionedFloats';\n    }\n    if ((0,_css_js__WEBPACK_IMPORTED_MODULE_1__.isInFlow)(styles) && (0,_css_js__WEBPACK_IMPORTED_MODULE_1__.isInline)(styles) && !(0,_css_js__WEBPACK_IMPORTED_MODULE_1__.isPositioned)(styles)) {\n        return 'inFlowInlineLevelNonPositionedDescendants';\n    }\n    if (zIndex === 0 && ((0,_css_js__WEBPACK_IMPORTED_MODULE_1__.isPositioned)(styles) || establishesStackingContext(styles, parentStyles))) {\n        return 'childStackingContextsWithStackLevelZeroAndPositionedDescendantsWithStackLevelZero';\n    }\n    if (zIndex !== undefined && zIndex > 0 && establishesStackingContext(styles, parentStyles)) {\n        return 'childStackingContextsWithPositiveStackLevels';\n    }\n    return undefined;\n}\nfunction sortChildrenByZIndex(parent) {\n    const sorted = [...parent.children].sort((a, b) => {\n        const zIndexA = a.dataset.zIndex;\n        const zIndexB = b.dataset.zIndex;\n        if (!zIndexA || !zIndexB) {\n            // E.g. a <clipPath>\n            return 0;\n        }\n        return parseInt(zIndexA, 10) - parseInt(zIndexB, 10);\n    });\n    for (const child of sorted) {\n        parent.append(child);\n    }\n}\nfunction sortStackingLayerChildren(stackingLayers) {\n    sortChildrenByZIndex(stackingLayers.childStackingContextsWithNegativeStackLevels);\n    sortChildrenByZIndex(stackingLayers.childStackingContextsWithPositiveStackLevels);\n}\n/**\n * Removes all stacking layers that are empty.\n */\nfunction cleanupStackingLayerChildren(stackingLayers) {\n    for (const name of STACKING_LAYER_NAMES) {\n        const layer = stackingLayers[name];\n        if (!layer.hasChildNodes()) {\n            layer.remove();\n        }\n    }\n}\n//# sourceMappingURL=stacking.js.map\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/dom-to-svg/lib/stacking.js?");

/***/ }),

/***/ "./node_modules/dom-to-svg/lib/svg.js":
/*!********************************************!*\
  !*** ./node_modules/dom-to-svg/lib/svg.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"handleSvgElement\": () => (/* binding */ handleSvgElement),\n/* harmony export */   \"handleSvgNode\": () => (/* binding */ handleSvgNode)\n/* harmony export */ });\n/* harmony import */ var postcss_value_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! postcss-value-parser */ \"./node_modules/postcss-value-parser/lib/index.js\");\n/* harmony import */ var _css_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./css.js */ \"./node_modules/dom-to-svg/lib/css.js\");\n/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom.js */ \"./node_modules/dom-to-svg/lib/dom.js\");\n/* harmony import */ var _text_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./text.js */ \"./node_modules/dom-to-svg/lib/text.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.js */ \"./node_modules/dom-to-svg/lib/util.js\");\n\n\n\n\n\n/**\n * Recursively clone an `<svg>` element, inlining it into the output SVG document with the necessary transforms.\n */\nfunction handleSvgNode(node, context) {\n    if ((0,_dom_js__WEBPACK_IMPORTED_MODULE_1__.isElement)(node)) {\n        if (!(0,_dom_js__WEBPACK_IMPORTED_MODULE_1__.isSVGElement)(node)) {\n            return;\n        }\n        handleSvgElement(node, context);\n    }\n    else if ((0,_dom_js__WEBPACK_IMPORTED_MODULE_1__.isTextNode)(node)) {\n        const clonedTextNode = node.cloneNode(true);\n        context.currentSvgParent.append(clonedTextNode);\n    }\n}\nconst ignoredElements = new Set(['script', 'style', 'foreignElement']);\nconst URL_ID_REFERENCE_REGEX = /\\burl\\([\"']?#/;\nfunction handleSvgElement(element, context) {\n    var _a, _b, _c, _d;\n    if (ignoredElements.has(element.tagName)) {\n        return;\n    }\n    let elementToAppend;\n    if ((0,_dom_js__WEBPACK_IMPORTED_MODULE_1__.isSVGSVGElement)(element)) {\n        const contentContainer = context.svgDocument.createElementNS(_dom_js__WEBPACK_IMPORTED_MODULE_1__.svgNamespace, 'g');\n        elementToAppend = contentContainer;\n        contentContainer.classList.add('svg-content', ...element.classList);\n        contentContainer.dataset.viewBox = (_a = element.getAttribute('viewBox')) !== null && _a !== void 0 ? _a : '';\n        contentContainer.dataset.width = (_b = element.getAttribute('width')) !== null && _b !== void 0 ? _b : '';\n        contentContainer.dataset.height = (_c = element.getAttribute('height')) !== null && _c !== void 0 ? _c : '';\n        // Since the SVG is getting inlined into the output SVG, we need to transform its contents according to its\n        // viewBox, width, height and preserveAspectRatio. We can use getScreenCTM() for this on one of its\n        // SVGGraphicsElement children (in Chrome calling it on the <svg> works too, but not in Firefox:\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=873106).\n        for (const child of element.children) {\n            if (!(0,_dom_js__WEBPACK_IMPORTED_MODULE_1__.isSVGGraphicsElement)(child)) {\n                continue;\n            }\n            let viewBoxTransformMatrix = \n            // When this function is called on an inline <svg> element in the original DOM, we want\n            // getScreenCTM() to map it to the DOM coordinate system. When this function is called from\n            // inlineResources() the <svg> is already embedded into the output <svg>. In that case the output\n            // SVG already has a viewBox, and the coordinate system of the SVG is not equal to the coordinate\n            // system of the screen, therefor we need to use getCTM() to map it into the output SVG's\n            // coordinate system.\n            child.ownerDocument !== context.svgDocument &&\n                // When we inline an SVG, we put a transform on it for the getScreenCTM(). When that SVG also\n                // contains another SVG, the inner SVG should just get transformed relative to the outer SVG, not\n                // relative to the screen, because the transforms will stack in the output SVG.\n                !((_d = element.parentElement) === null || _d === void 0 ? void 0 : _d.closest('svg'))\n                ? child.getScreenCTM()\n                : child.getCTM();\n            // This should only be null if the <svg> is `display: none`\n            if (!viewBoxTransformMatrix) {\n                break;\n            }\n            // Make sure to handle a child that already has a transform. That transform should only apply to the\n            // child, not to the entire SVG contents, so we need to calculate it out.\n            if (child.transform.baseVal.numberOfItems > 0) {\n                child.transform.baseVal.consolidate();\n                const existingTransform = child.transform.baseVal.getItem(0).matrix;\n                viewBoxTransformMatrix = viewBoxTransformMatrix.multiply(existingTransform.inverse());\n            }\n            contentContainer.transform.baseVal.appendItem(contentContainer.transform.baseVal.createSVGTransformFromMatrix(viewBoxTransformMatrix));\n            break;\n        }\n    }\n    else {\n        // Clone element\n        if ((0,_dom_js__WEBPACK_IMPORTED_MODULE_1__.isSVGAnchorElement)(element) && !context.options.keepLinks) {\n            elementToAppend = context.svgDocument.createElementNS(_dom_js__WEBPACK_IMPORTED_MODULE_1__.svgNamespace, 'g');\n        }\n        else {\n            elementToAppend = element.cloneNode(false);\n        }\n        // Remove event handlers\n        for (const attribute of elementToAppend.attributes) {\n            if (attribute.localName.startsWith('on')) {\n                elementToAppend.attributes.removeNamedItemNS(attribute.namespaceURI, attribute.localName);\n            }\n            else if (attribute.localName === 'href' && attribute.value.startsWith('javascript:')) {\n                elementToAppend.attributes.removeNamedItemNS(attribute.namespaceURI, attribute.localName);\n            }\n        }\n        const window = element.ownerDocument.defaultView;\n        (0,_util_js__WEBPACK_IMPORTED_MODULE_2__.assert)(window, \"Element's ownerDocument has no defaultView\");\n        const svgViewportElement = element.ownerSVGElement;\n        (0,_util_js__WEBPACK_IMPORTED_MODULE_2__.assert)(svgViewportElement, 'Expected element to have ownerSVGElement');\n        const styles = window.getComputedStyle(element);\n        if ((0,_dom_js__WEBPACK_IMPORTED_MODULE_1__.isSVGGraphicsElement)(element)) {\n            copyGraphicalPresentationAttributes(styles, elementToAppend, svgViewportElement.viewBox.animVal);\n            if ((0,_dom_js__WEBPACK_IMPORTED_MODULE_1__.isSVGTextContentElement)(element)) {\n                (0,_text_js__WEBPACK_IMPORTED_MODULE_3__.copyTextStyles)(styles, elementToAppend);\n            }\n        }\n        // Namespace ID references url(#...)\n        for (const attribute of elementToAppend.attributes) {\n            if (attribute.localName === 'href') {\n                if (attribute.value.startsWith('#')) {\n                    attribute.value = attribute.value.replace('#', `#${context.idPrefix}`);\n                }\n            }\n            else if (URL_ID_REFERENCE_REGEX.test(attribute.value)) {\n                attribute.value = rewriteUrlIdReferences(attribute.value, context);\n            }\n        }\n        for (const property of elementToAppend.style) {\n            const value = elementToAppend.style.getPropertyValue(property);\n            if (URL_ID_REFERENCE_REGEX.test(value)) {\n                elementToAppend.style.setProperty(property, rewriteUrlIdReferences(value, context), elementToAppend.style.getPropertyPriority(property));\n            }\n        }\n    }\n    // Make sure all IDs are unique\n    if (elementToAppend.id) {\n        elementToAppend.id = context.idPrefix + elementToAppend.id;\n    }\n    context.currentSvgParent.append(elementToAppend);\n    for (const child of element.childNodes) {\n        handleSvgNode(child, { ...context, currentSvgParent: elementToAppend });\n    }\n}\nconst graphicalPresentationAttributes = [\n    'alignment-baseline',\n    'baseline-shift',\n    // 'clip',\n    'clip-path',\n    'clip-rule',\n    'color',\n    'color-interpolation',\n    'color-interpolation-filters',\n    // 'color-profile',\n    'color-rendering',\n    // 'cursor',\n    'direction',\n    // 'display',\n    // 'enable-background',\n    'fill',\n    'fill-opacity',\n    'fill-rule',\n    'filter',\n    'flood-color',\n    'flood-opacity',\n    'image-rendering',\n    'lighting-color',\n    'marker-end',\n    'marker-mid',\n    'marker-start',\n    'mask',\n    'opacity',\n    // 'overflow',\n    'pointer-events',\n    'shape-rendering',\n    // 'solid-color',\n    // 'solid-opacity',\n    'stop-color',\n    'stop-opacity',\n    'stroke',\n    'stroke-dasharray',\n    'stroke-dashoffset',\n    'stroke-linecap',\n    'stroke-linejoin',\n    'stroke-miterlimit',\n    'stroke-opacity',\n    'stroke-width',\n    'transform',\n    'vector-effect',\n    'visibility',\n];\nconst defaults = {\n    'alignment-baseline': 'auto',\n    'baseline-shift': '0px',\n    'clip-path': 'none',\n    'clip-rule': 'nonzero',\n    'color-interpolation-filters': 'linearrgb',\n    'color-interpolation': 'srgb',\n    'color-rendering': 'auto',\n    'fill-opacity': '1',\n    'fill-rule': 'nonzero',\n    'flood-color': 'rgb(0, 0, 0)',\n    'flood-opacity': '1',\n    'image-rendering': 'auto',\n    'lighting-color': 'rgb(255, 255, 255)',\n    'marker-end': 'none',\n    'marker-mid': 'none',\n    'marker-start': 'none',\n    'pointer-events': 'auto',\n    'shape-rendering': 'auto',\n    'stop-color': 'rgb(0, 0, 0)',\n    'stop-opacity': '1',\n    'stroke-dasharray': 'none',\n    'stroke-dashoffset': '0px',\n    'stroke-linecap': 'butt',\n    'stroke-linejoin': 'miter',\n    'stroke-miterlimit': '4',\n    'stroke-opacity': '1',\n    'stroke-width': '1px',\n    'vector-effect': 'none',\n    color: '',\n    direction: 'ltr',\n    fill: '',\n    filter: 'none',\n    mask: 'none',\n    opacity: '1',\n    stroke: '',\n    transform: 'none',\n    visibility: 'visible',\n};\n/**\n * Prefixes all ID references of the form `url(#id)` in the given string.\n */\nfunction rewriteUrlIdReferences(value, { idPrefix }) {\n    const parsedValue = postcss_value_parser__WEBPACK_IMPORTED_MODULE_0__(value);\n    parsedValue.walk(node => {\n        if (node.type !== 'function' || node.value !== 'url') {\n            return;\n        }\n        const urlArgument = node.nodes[0];\n        if (!urlArgument) {\n            return;\n        }\n        urlArgument.value = urlArgument.value.replace('#', `#${idPrefix}`);\n    });\n    return postcss_value_parser__WEBPACK_IMPORTED_MODULE_0__.stringify(parsedValue.nodes);\n}\nfunction copyGraphicalPresentationAttributes(styles, target, viewBox) {\n    var _a;\n    for (const attribute of graphicalPresentationAttributes) {\n        let value = styles.getPropertyValue(attribute);\n        if (value && value !== defaults[attribute]) {\n            if (value.endsWith('%')) {\n                // E.g. https://svgwg.org/svg2-draft/painting.html#StrokeWidth\n                // Percentages:\trefer to the normalized diagonal of the current SVG viewport (see Units)\n                value = (_a = (0,_css_js__WEBPACK_IMPORTED_MODULE_4__.parseCSSLength)(value, (0,_util_js__WEBPACK_IMPORTED_MODULE_2__.diagonale)(viewBox))) !== null && _a !== void 0 ? _a : 0;\n            }\n            target.setAttribute(attribute, value.toString());\n        }\n    }\n}\n//# sourceMappingURL=svg.js.map\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/dom-to-svg/lib/svg.js?");

/***/ }),

/***/ "./node_modules/dom-to-svg/lib/text.js":
/*!*********************************************!*\
  !*** ./node_modules/dom-to-svg/lib/text.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"copyTextStyles\": () => (/* binding */ copyTextStyles),\n/* harmony export */   \"handleTextNode\": () => (/* binding */ handleTextNode),\n/* harmony export */   \"textAttributes\": () => (/* binding */ textAttributes)\n/* harmony export */ });\n/* harmony import */ var _css_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./css.js */ \"./node_modules/dom-to-svg/lib/css.js\");\n/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dom.js */ \"./node_modules/dom-to-svg/lib/dom.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ \"./node_modules/dom-to-svg/lib/util.js\");\n\n\n\nfunction handleTextNode(textNode, context) {\n    if (!textNode.ownerDocument.defaultView) {\n        throw new Error(\"Element's ownerDocument has no defaultView\");\n    }\n    const window = textNode.ownerDocument.defaultView;\n    const parentElement = textNode.parentElement;\n    const styles = window.getComputedStyle(parentElement);\n    if (!(0,_css_js__WEBPACK_IMPORTED_MODULE_0__.isVisible)(styles)) {\n        return;\n    }\n    const selection = window.getSelection();\n    (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.assert)(selection, 'Could not obtain selection from window. Selection is needed for detecting whitespace collapsing in text.');\n    const svgTextElement = context.svgDocument.createElementNS(_dom_js__WEBPACK_IMPORTED_MODULE_2__.svgNamespace, 'text');\n    // Copy text styles\n    // https://css-tricks.com/svg-properties-and-css\n    copyTextStyles(styles, svgTextElement);\n    const tabSize = parseInt(styles.tabSize, 10);\n    // Make sure the y attribute is the bottom of the box, not the baseline\n    svgTextElement.setAttribute('dominant-baseline', 'text-after-edge');\n    const lineRange = textNode.ownerDocument.createRange();\n    lineRange.setStart(textNode, 0);\n    lineRange.setEnd(textNode, 0);\n    while (true) {\n        const addTextSpanForLineRange = () => {\n            if (lineRange.collapsed) {\n                return;\n            }\n            const lineRectangle = lineRange.getClientRects()[0];\n            if (!(0,_util_js__WEBPACK_IMPORTED_MODULE_1__.doRectanglesIntersect)(lineRectangle, context.options.captureArea)) {\n                return;\n            }\n            const textSpan = context.svgDocument.createElementNS(_dom_js__WEBPACK_IMPORTED_MODULE_2__.svgNamespace, 'tspan');\n            textSpan.setAttribute('xml:space', 'preserve');\n            // lineRange.toString() returns the text including whitespace.\n            // by adding the range to a Selection, then getting the text from that selection,\n            // we can let the DOM handle whitespace collapsing the same way as innerText (but for a Range).\n            // For this to work, the parent element must not forbid user selection.\n            const previousUserSelect = parentElement.style.userSelect;\n            parentElement.style.userSelect = 'all';\n            try {\n                selection.removeAllRanges();\n                selection.addRange(lineRange);\n                textSpan.textContent = selection\n                    .toString()\n                    // SVG does not support tabs in text. Tabs get rendered as one space character. Convert the\n                    // tabs to spaces according to tab-size instead.\n                    // Ideally we would keep the tab and create offset tspans.\n                    .replace(/\\t/g, ' '.repeat(tabSize));\n            }\n            finally {\n                parentElement.style.userSelect = previousUserSelect;\n                selection.removeAllRanges();\n            }\n            textSpan.setAttribute('x', lineRectangle.x.toString());\n            textSpan.setAttribute('y', lineRectangle.bottom.toString()); // intentionally bottom because of dominant-baseline setting\n            textSpan.setAttribute('textLength', lineRectangle.width.toString());\n            textSpan.setAttribute('lengthAdjust', 'spacingAndGlyphs');\n            svgTextElement.append(textSpan);\n        };\n        try {\n            lineRange.setEnd(textNode, lineRange.endOffset + 1);\n        }\n        catch (error) {\n            if (error.code === DOMException.INDEX_SIZE_ERR) {\n                // Reached the end\n                addTextSpanForLineRange();\n                break;\n            }\n            throw error;\n        }\n        // getClientRects() returns one rectangle for each line of a text node.\n        const lineRectangles = lineRange.getClientRects();\n        // If no lines\n        if (!lineRectangles[0]) {\n            // Pure whitespace text nodes are collapsed and not rendered.\n            return;\n        }\n        // If two (unique) lines\n        // For some reason, Chrome returns 2 identical DOMRects for text with text-overflow: ellipsis.\n        if (lineRectangles[1] && lineRectangles[0].top !== lineRectangles[1].top) {\n            // Crossed a line break.\n            // Go back one character to select exactly the previous line.\n            lineRange.setEnd(textNode, lineRange.endOffset - 1);\n            // Add <tspan> for exactly that line\n            addTextSpanForLineRange();\n            // Start on the next line.\n            lineRange.setStart(textNode, lineRange.endOffset);\n        }\n    }\n    context.currentSvgParent.append(svgTextElement);\n}\nconst textAttributes = new Set([\n    'color',\n    'dominant-baseline',\n    'font-family',\n    'font-size',\n    'font-size-adjust',\n    'font-stretch',\n    'font-style',\n    'font-variant',\n    'font-weight',\n    'direction',\n    'letter-spacing',\n    'text-decoration',\n    'text-anchor',\n    'text-decoration',\n    'text-rendering',\n    'unicode-bidi',\n    'word-spacing',\n    'writing-mode',\n    'user-select',\n]);\nfunction copyTextStyles(styles, svgElement) {\n    for (const textProperty of textAttributes) {\n        const value = styles.getPropertyValue(textProperty);\n        if (value) {\n            svgElement.setAttribute(textProperty, value);\n        }\n    }\n    // tspan uses fill, CSS uses color\n    svgElement.setAttribute('fill', styles.color);\n}\n//# sourceMappingURL=text.js.map\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/dom-to-svg/lib/text.js?");

/***/ }),

/***/ "./node_modules/dom-to-svg/lib/traversal.js":
/*!**************************************************!*\
  !*** ./node_modules/dom-to-svg/lib/traversal.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"walkNode\": () => (/* binding */ walkNode)\n/* harmony export */ });\n/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom.js */ \"./node_modules/dom-to-svg/lib/dom.js\");\n/* harmony import */ var _element_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./element.js */ \"./node_modules/dom-to-svg/lib/element.js\");\n/* harmony import */ var _text_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./text.js */ \"./node_modules/dom-to-svg/lib/text.js\");\n\n\n\nfunction walkNode(node, context) {\n    if ((0,_dom_js__WEBPACK_IMPORTED_MODULE_0__.isElement)(node)) {\n        (0,_element_js__WEBPACK_IMPORTED_MODULE_1__.handleElement)(node, context);\n    }\n    else if ((0,_dom_js__WEBPACK_IMPORTED_MODULE_0__.isTextNode)(node)) {\n        (0,_text_js__WEBPACK_IMPORTED_MODULE_2__.handleTextNode)(node, context);\n    }\n}\n//# sourceMappingURL=traversal.js.map\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/dom-to-svg/lib/traversal.js?");

/***/ }),

/***/ "./node_modules/dom-to-svg/lib/util.js":
/*!*********************************************!*\
  !*** ./node_modules/dom-to-svg/lib/util.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"assert\": () => (/* binding */ assert),\n/* harmony export */   \"createIdGenerator\": () => (/* binding */ createIdGenerator),\n/* harmony export */   \"diagonale\": () => (/* binding */ diagonale),\n/* harmony export */   \"doRectanglesIntersect\": () => (/* binding */ doRectanglesIntersect),\n/* harmony export */   \"isDefined\": () => (/* binding */ isDefined),\n/* harmony export */   \"isTaggedUnionMember\": () => (/* binding */ isTaggedUnionMember),\n/* harmony export */   \"withTimeout\": () => (/* binding */ withTimeout)\n/* harmony export */ });\nconst createIdGenerator = () => {\n    const nextCounts = new Map();\n    return prefix => {\n        var _a;\n        const count = (_a = nextCounts.get(prefix)) !== null && _a !== void 0 ? _a : 1;\n        nextCounts.set(prefix, count + 1);\n        return `${prefix}${count}`;\n    };\n};\nconst isDefined = (value) => value !== null && value !== undefined;\n/**\n * Check if two rectangles (e.g. an element and the capture area) intersect.\n */\nconst doRectanglesIntersect = (a, b) => !(a.bottom < b.top || // A is above B\n    a.top > b.bottom || // A is below B\n    a.right < b.left || // A is left of B\n    // A is right of B\n    a.left > b.right);\n/**\n * Calculates the length of the diagonale of a given rectangle.\n */\nfunction diagonale(box) {\n    return Math.sqrt(box.width ** 2 + box.height ** 2);\n}\nfunction withTimeout(timeout, message, func) {\n    return Promise.race([\n        func(),\n        new Promise((resolve, reject) => setTimeout(() => reject(new Error(message)), timeout)),\n    ]);\n}\n/**\n * Type guard to check if an object is a specific member of a tagged union type.\n *\n * @param key The key to check\n * @param value The value the key has to be.\n */\nconst isTaggedUnionMember = (key, value) => (object) => object[key] === value;\nfunction assert(condition, message) {\n    if (!condition) {\n        throw new Error(message);\n    }\n}\n//# sourceMappingURL=util.js.map\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/dom-to-svg/lib/util.js?");

/***/ }),

/***/ "./node_modules/postcss/lib/postcss.mjs":
/*!**********************************************!*\
  !*** ./node_modules/postcss/lib/postcss.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AtRule\": () => (/* binding */ AtRule),\n/* harmony export */   \"Comment\": () => (/* binding */ Comment),\n/* harmony export */   \"Container\": () => (/* binding */ Container),\n/* harmony export */   \"CssSyntaxError\": () => (/* binding */ CssSyntaxError),\n/* harmony export */   \"Declaration\": () => (/* binding */ Declaration),\n/* harmony export */   \"Document\": () => (/* binding */ Document),\n/* harmony export */   \"Input\": () => (/* binding */ Input),\n/* harmony export */   \"Node\": () => (/* binding */ Node),\n/* harmony export */   \"Processor\": () => (/* binding */ Processor),\n/* harmony export */   \"Result\": () => (/* binding */ Result),\n/* harmony export */   \"Root\": () => (/* binding */ Root),\n/* harmony export */   \"Rule\": () => (/* binding */ Rule),\n/* harmony export */   \"Warning\": () => (/* binding */ Warning),\n/* harmony export */   \"atRule\": () => (/* binding */ atRule),\n/* harmony export */   \"comment\": () => (/* binding */ comment),\n/* harmony export */   \"decl\": () => (/* binding */ decl),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   \"document\": () => (/* binding */ document),\n/* harmony export */   \"fromJSON\": () => (/* binding */ fromJSON),\n/* harmony export */   \"list\": () => (/* binding */ list),\n/* harmony export */   \"parse\": () => (/* binding */ parse),\n/* harmony export */   \"plugin\": () => (/* binding */ plugin),\n/* harmony export */   \"root\": () => (/* binding */ root),\n/* harmony export */   \"rule\": () => (/* binding */ rule),\n/* harmony export */   \"stringify\": () => (/* binding */ stringify)\n/* harmony export */ });\n/* harmony import */ var _postcss_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./postcss.js */ \"./node_modules/postcss/lib/postcss.js\");\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_postcss_js__WEBPACK_IMPORTED_MODULE_0__);\n\nconst stringify = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.stringify\nconst fromJSON = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.fromJSON\nconst plugin = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.plugin\nconst parse = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.parse\nconst list = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.list\n\nconst document = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.document\nconst comment = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.comment\nconst atRule = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.atRule\nconst rule = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.rule\nconst decl = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.decl\nconst root = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.root\n\nconst CssSyntaxError = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.CssSyntaxError\nconst Declaration = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.Declaration\nconst Container = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.Container\nconst Processor = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.Processor\nconst Document = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.Document\nconst Comment = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.Comment\nconst Warning = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.Warning\nconst AtRule = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.AtRule\nconst Result = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.Result\nconst Input = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.Input\nconst Rule = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.Rule\nconst Root = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.Root\nconst Node = _postcss_js__WEBPACK_IMPORTED_MODULE_0__.Node\n\n\n//# sourceURL=webpack://dom-to-svg/./node_modules/postcss/lib/postcss.mjs?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./index.js");
/******/ 	
/******/ })()
;